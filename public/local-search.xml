<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ASAN、valgrind（内存泄露的检测工具）</title>
    <link href="/blog/2025/09/17/ASAN%E3%80%81valgrind%EF%BC%88%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E7%9A%84%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7%EF%BC%89/"/>
    <url>/blog/2025/09/17/ASAN%E3%80%81valgrind%EF%BC%88%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E7%9A%84%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="ASAN、valgrind（内存泄露的检测工具）"><a href="#ASAN、valgrind（内存泄露的检测工具）" class="headerlink" title="ASAN、valgrind（内存泄露的检测工具）"></a>ASAN、valgrind（内存泄露的检测工具）</h1><h2 id="一、工具概览"><a href="#一、工具概览" class="headerlink" title="一、工具概览"></a>一、工具概览</h2><h3 id="ASan"><a href="#ASan" class="headerlink" title="ASan"></a>ASan</h3><h4 id="什么是-AddressSanitizer？"><a href="#什么是-AddressSanitizer？" class="headerlink" title="什么是 AddressSanitizer？"></a>什么是 AddressSanitizer？</h4><p><a href="https://github.com/google/sanitizers/wiki/AddressSanitizer">AddressSanitizer</a>（又名 ASan）是一款适用于 C&#x2F;C++ 的内存错误检测器。</p><h4 id="主要检测什么问题？"><a href="#主要检测什么问题？" class="headerlink" title="主要检测什么问题？"></a>主要检测什么问题？</h4><p>ASan可以检测出程序中不合理的内存使用行为，主要包括以下行为：</p><table><thead><tr><th><strong>错误行为</strong></th><th><strong>简介</strong></th></tr></thead><tbody><tr><td>global buffer overflow</td><td>全局内存访问越界</td></tr><tr><td>heap buffer overflow</td><td>堆内存访问越界<a href="https://github.com/google/sanitizers/wiki/AddressSanitizerExampleHeapOutOfBounds">github.com</a></td></tr><tr><td>initialization order bugs</td><td>全局变量初始化顺序异常全局变量初始化间存在依赖，导致实际运行时因初始化顺序问题导致的初始值异常</td></tr><tr><td>memory leaks</td><td>内存泄漏在程序正常退出时输出报告</td></tr><tr><td>stack buffer overflow</td><td>栈内存访问越界</td></tr><tr><td>use after free</td><td>访问已经释放的内存，在释放内存后仍然尝试访问此内存<a href="https://github.com/google/sanitizers/wiki/AddressSanitizerExampleUseAfterFree">AddressSanitizerExampleUseAfterFree · google&#x2F;sanitizers Wiki</a></td></tr><tr><td>use after return</td><td>访问生命周期结束的对象在函数退出后尝试访问函数内声明的局部变量</td></tr><tr><td>user after scope</td><td>访问生命周期结束的对象在”{}”包起来的代码块外访问代码块内声明的局部变量</td></tr></tbody></table><h3 id="Valgrind"><a href="#Valgrind" class="headerlink" title="Valgrind"></a>Valgrind</h3><h4 id="什么是-Valgrind（重点是-Memcheck）？"><a href="#什么是-Valgrind（重点是-Memcheck）？" class="headerlink" title="什么是 Valgrind（重点是 Memcheck）？"></a>什么是 Valgrind（重点是 Memcheck）？</h4><p>Valgrind 是一个用于构建动态分析工具的插桩框架。Valgrind 中的一些工具可以自动检测许多内存管理和线程错误，并详细分析您的程序。还可以使用 Valgrind 构建新的工具。</p><p>Valgrind 发行版目前包含七个生产级工具：一个内存错误检测器、两个线程错误检测器、一个缓存和分支预测分析器、一个调用图生成缓存和分支预测分析器，以及两个不同的堆分析器。其中最受欢迎的工具是 Memcheck。它可以检测 C 和 C++ 程序中常见的许多内存相关错误，这些错误可能导致程序崩溃和不可预测的行为。</p><h4 id="主要检测什么问题？-1"><a href="#主要检测什么问题？-1" class="headerlink" title="主要检测什么问题？"></a>主要检测什么问题？</h4><p>检测内存泄露，数组越界等一些程序中常见的错误。特别的，它的 memcheck 工具能够检测内存泄漏、未初始化内存的使用和非法的内存访问。</p><h2 id="二、原理机制"><a href="#二、原理机制" class="headerlink" title="二、原理机制"></a>二、原理机制</h2><h3 id="ASan工作机制"><a href="#ASan工作机制" class="headerlink" title="ASan工作机制"></a>ASan工作机制</h3><p>详细的工作原理官方文档：<a href="https://github.com/google/sanitizers/wiki/AddressSanitizerAlgorithm">https://github.com/google/sanitizers/wiki/AddressSanitizerAlgorithm</a></p><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><p>Google ASan工具ASAN，全称 AddressSanitizer，也即地址消毒技术。可以用来检测内存问题，例如<a href="https://so.csdn.net/so/search?q=%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA&spm=1001.2101.3001.7020">缓冲区溢出</a>或对悬空指针的非法访问等。<br>ASan主要是进行<a href="https://so.csdn.net/so/search?q=%E7%BC%96%E8%AF%91%E5%99%A8&spm=1001.2101.3001.7020">编译器</a>级别的HOOK与插桩,目前主流Clang，GCC，MSVC都支持，再结合运行时对影子内存的诊断输出，相当于双管齐下，整体效果不错；官方说是2倍左右性能开销，1&#x2F;8的内存到2倍的开销。</p><p>AddressSanitizer主要包括两部分：插桩(Instrumentation)和动态运行库(Run-time library)。插桩主要是针对在llvm编译器级别对访问内存的操作(store，load，alloca等)，将它们进行处理。动态运行库主要提供一些运行时的复杂的功能(比如poison&#x2F;unpoison shadow memory)以及将malloc,free等系统调用函数hook住。</p><h5 id="内存操作进行插桩"><a href="#内存操作进行插桩" class="headerlink" title="内存操作进行插桩"></a>内存操作进行插桩</h5><p>对new,malloc,delete,free,memcpy,其它内存访问等操作进行编译时替换与代码插入，是编译器完成的；加了ASAN相关的编译选项后，代码中的每一次内存访问操作都会被编译器修改为如下方式：</p><p>编译前:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">*address = ...;    <span class="hljs-comment">// or   ... = *address;</span><br></code></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsPoisoned</span>(address)) &#123; <span class="hljs-comment">// 判断内存是否中毒</span><br>  <span class="hljs-built_in">ReportError</span>(address, kAccessSize, kIsWrite);<br>&#125;<br>*address = ...;  <span class="hljs-comment">// or: ... = *address;</span><br></code></pre></td></tr></table></figure><p>该方式的关键点就在于读写内存前会判断地址是否处于“中毒”状态，还有如何把<code>IsPoisoned</code>实现的非常快，把<code>ReportError</code>实现的非常紧凑，从而避免插入的代码过多。</p><p>eg：</p><p>未插桩的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">char</span> a[<span class="hljs-number">8</span>];<br>  ...<br>  <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>插桩后的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">char</span> redzone1[<span class="hljs-number">32</span>];  <span class="hljs-comment">// 32-byte aligned</span><br>  <span class="hljs-type">char</span> a[<span class="hljs-number">8</span>];          <span class="hljs-comment">// 32-byte aligned</span><br>  <span class="hljs-type">char</span> redzone2[<span class="hljs-number">24</span>]; <br>  <span class="hljs-type">char</span> redzone3[<span class="hljs-number">32</span>];  <span class="hljs-comment">// 32-byte aligned</span><br>  <span class="hljs-type">int</span>  *shadow_base = <span class="hljs-built_in">MemToShadow</span>(redzone1);<br>  shadow_base[<span class="hljs-number">0</span>] = <span class="hljs-number">0xffffffff</span>;  <span class="hljs-comment">// poison redzone1</span><br>  shadow_base[<span class="hljs-number">1</span>] = <span class="hljs-number">0xffffff00</span>;  <span class="hljs-comment">// poison redzone2, unpoison &#x27;a&#x27;</span><br>  shadow_base[<span class="hljs-number">2</span>] = <span class="hljs-number">0xffffffff</span>;  <span class="hljs-comment">// poison redzone3</span><br>  ...<br>  shadow_base[<span class="hljs-number">0</span>] = shadow_base[<span class="hljs-number">1</span>] = shadow_base[<span class="hljs-number">2</span>] = <span class="hljs-number">0</span>; <span class="hljs-comment">// unpoison all</span><br>  <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="内存映射与诊断"><a href="#内存映射与诊断" class="headerlink" title="内存映射与诊断"></a>内存映射与诊断</h5><p>按照一定的算法对原始内存进行一分影子内存的拷贝生成，目前不是1：1的拷贝，而是巧妙的按1&#x2F;8大小进行处理，并进行一定的下毒与标记，减少内存的浪费。正常访问内存前，先对影子内存进行检查访问，如果发现数据不对，就进行诊断报错处理。</p><p>运行时库（libasan.so）malloc&#x2F;free函数进行了替换，在malloc函数中额外的分配了Redzone区域的内存，将与Redzone区域对应的影子内存加锁，主要的内存区域对应的影子内存不加锁。redzone 被标记为中毒状态，free函数将所有分配的内存区域加锁，并放到了隔离区域的队列中(保证在一定的时间内不会再被malloc函数分配)，并被标记为中毒状态。</p><p><img src="https://qnwang.oss-cn-hangzhou.aliyuncs.com/internship/20250514220252808.png" alt="mapping图片"></p><h5 id="防护缓冲区溢出的基本步骤"><a href="#防护缓冲区溢出的基本步骤" class="headerlink" title="防护缓冲区溢出的基本步骤"></a>防护缓冲区溢出的基本步骤</h5><p>中毒状态：内存对应的 shadow 区标记该内存不能访问的状态</p><pre><code class=" mermaid">flowchart TD    A[创建 redzone&lt;br&gt;在全局变量、堆、栈前后插入&lt;br&gt;并标记为中毒状态] --&gt; B[建立影子内存区&lt;br&gt;8 字节内存对应 1 字节影子]    B --&gt; C[访问 redzone（如读写）&lt;br&gt;对应影子内存为中毒状态&lt;br&gt;触发报错]    C --&gt; D[报错信息：进程号、错误类型、&lt;br&gt;源文件名、行号、函数调用关系、&lt;br&gt;影子内存状态（出错部分中括号标注）]</code></pre><h5 id="内存泄漏检测原理"><a href="#内存泄漏检测原理" class="headerlink" title="内存泄漏检测原理"></a>内存泄漏检测原理</h5><pre><code class=" mermaid">flowchart TD    A[&quot;ASAN 接管内存申请接口&lt;br&gt;(用户使用的内存全部由 ASAN 管理)&quot;] --&gt; B[&quot;进程退出时触发 ASAN 内存泄漏检测&lt;br&gt;(可通过复位、重启等方式触发)&quot;]    B --&gt; C[遍历所有未释放堆内存]    C --&gt; D&#123;该内存是否仍被引用？&#125;    D -- 是 --&gt; F[跳过，未泄漏]    D -- 否 --&gt; E[认定为内存泄漏&lt;br&gt;输出内存大小与申请调用栈]classDef important fill:#fff3e0,stroke:#ff9800,stroke-width:2px;</code></pre><h4 id="源码路径"><a href="#源码路径" class="headerlink" title="源码路径"></a>源码路径</h4><table><thead><tr><th>路径</th><th>文件&#x2F;模块</th><th>作用</th></tr></thead><tbody><tr><td><code>asan_rtl.cpp</code></td><td>运行时库入口（RunTime Library）</td><td>初始化 ASan、设置 hook、启动检测等</td></tr><tr><td><code>asan_interceptors.cpp</code></td><td>标准函数拦截器</td><td>重写 <code>memcpy</code>、<code>malloc</code>、<code>free</code> 等函数</td></tr><tr><td><code>asan_report.cpp</code></td><td>报告错误栈信息</td><td>打印报错信息、栈追踪、源码位置等</td></tr><tr><td><code>asan_mapping.h</code></td><td>Shadow memory 映射逻辑</td><td>1:8 映射关系，关键 shadow 计算</td></tr><tr><td><code>asan_allocator.cpp</code></td><td>自定义内存分配器</td><td>包含红区、对齐等安全逻辑</td></tr><tr><td><code>asan_poisoning.cpp</code></td><td>中毒&#x2F;恢复接口</td><td>调用 poison&#x2F;unpoison 改变内存状态</td></tr><tr><td><code>asan_thread.cpp</code></td><td>线程管理</td><td>TLS、线程栈信息维护等</td></tr><tr><td><code>llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp</code></td><td>插桩入口</td><td>插入对 <code>shadow memory</code> 的访问检查代码</td></tr></tbody></table><h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><p>运行时库入口：</p><pre><code class=" mermaid">graph TD  A[&quot;compiler-rt/lib/asan/asan_rtl.cpp/__asan_init()&quot;] --&gt; B[&quot;asan_activation.cpp/AsanActivate()激活Asan&quot;]  A --&gt; C[&quot;AsanInitFromRtl()&quot;]  C --&gt; D[&quot;AsanInitInternal()&quot;]  classDef important fill:#fff3e0,stroke:#ff9800,stroke-width:2px;</code></pre><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title">AsanInitInternal</span><span class="hljs-params">()</span> </span>&#123;<br>    ……<br>    <span class="hljs-comment">// 设置内存毒化和分配上下文大小</span><br>    <span class="hljs-built_in">SetCanPoisonMemory</span>(<span class="hljs-built_in">flags</span>()-&gt;poison_heap);<br>  <span class="hljs-built_in">SetMallocContextSize</span>(<span class="hljs-built_in">common_flags</span>()-&gt;malloc_context_size);<br>    ……<br>    <span class="hljs-comment">// 初始化拦截器</span><br>    <span class="hljs-built_in">InitializeAsanInterceptors</span>();<br>    ……<br>    <span class="hljs-comment">// 初始化影子内存</span><br>    <span class="hljs-built_in">InitializeShadowMemory</span>();<br>    ……<br>    <span class="hljs-comment">// 初始化分配器</span><br>    AllocatorOptions allocator_options;<br>  allocator_options.<span class="hljs-built_in">SetFrom</span>(<span class="hljs-built_in">flags</span>(), <span class="hljs-built_in">common_flags</span>());<br>    <span class="hljs-built_in">InitializeAllocator</span>(allocator_options);<br>    ……<br>    <span class="hljs-comment">// 创建主线程，初始化反编辑器</span><br>    AsanThread *main_thread = <span class="hljs-built_in">CreateMainThread</span>();<br>  <span class="hljs-built_in">CHECK_EQ</span>(<span class="hljs-number">0</span>, main_thread-&gt;<span class="hljs-built_in">tid</span>());<br>    force_interface_symbols();  <span class="hljs-comment">// no-op.</span><br>    <span class="hljs-built_in">SanitizerInitializeUnwinder</span>();<br>    ……<br>&#125;<br></code></pre></td></tr></table></figure><p><code>asan_mapping.h</code> 查看 shadow memory 的映射计算公式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> ASAN_SHADOW_SCALE 3</span><br>……<br><span class="hljs-meta">#    <span class="hljs-keyword">define</span> MEM_TO_SHADOW(mem) \</span><br><span class="hljs-meta">      (((mem) &gt;&gt; ASAN_SHADOW_SCALE) + (ASAN_SHADOW_OFFSET))</span><br><span class="hljs-meta">#    <span class="hljs-keyword">define</span> SHADOW_TO_MEM(mem) \</span><br><span class="hljs-meta">      (((mem) - (ASAN_SHADOW_OFFSET)) &lt;&lt; (ASAN_SHADOW_SCALE))</span><br></code></pre></td></tr></table></figure><h3 id="Valgrind工作机制"><a href="#Valgrind工作机制" class="headerlink" title="Valgrind工作机制"></a>Valgrind工作机制</h3><h4 id="工作原理-1"><a href="#工作原理-1" class="headerlink" title="工作原理"></a>工作原理</h4><p>Valgrind由内核（core）以及基于内核的其他调试工具组成。内核类似于一个框架（framework），它模拟了一个CPU环境，并提供服务给其他工具；而其他工具则类似于插件 (plug-in)，利用内核提供的服务完成各种特定的内存调试任务。最直观的表达就是：<code>Valgrind内核 + 工具插件 = Valgrind工具</code>。在Valgrind框架下编写一个二进制程序动态分析工具比从零开始简很多，因为Valgrind内核为新工具的编写提供了许多通用的工具集，比如错误记录、动态插桩等。</p><p>当Valgrind工具程序启动时：</p><ol><li>将需要分析的程序加载与工具程序同一个进程空间中；</li><li>使用<code>JIT（just-in-time）</code>的动态二进制重编译技术，将代码分成一个个小的代码块实施重编译；</li><li>在重编译过程中，<strong>Valgrind内核会将相应代码块的机器码转化成中间表示</strong>，插件会在中间代码中进行相应分析代码的<strong>插桩</strong>，最后通过内核把中间表示转换成原本的机器码，在目标机器上执行；<strong>（源机器码 –&gt; 插桩 –&gt; 目标机器码）</strong></li><li>Valgrind内核大部分时间花在上述机器码和中间表示的相互翻译执行中，<strong>而原程序的所有机器码并没有执行，执行的都是插桩后的代码</strong></li></ol><p>所有的Valgrind工具都是使用<strong>静态链接</strong>的可执行文件，里面包含了Valgrind内核和工具插件。虽然这样会导致每个工具程序中都需要包含一份Valgrind内核，内核大概2.5MB左右，稍微浪费一些磁盘空间，但是静态链接可以使整个可执行文件加载到非标准的启动地址，方便把待分析程序加载进同一个进程空间中，然后使用Valgrind重编译技术将待分析程序机器码重编译到别的地址执行。</p><h5 id="核心框架"><a href="#核心框架" class="headerlink" title="核心框架"></a>核心框架</h5><p>Valgrind的体系结构如下图所示：</p><p><img src="https://qnwang.oss-cn-hangzhou.aliyuncs.com/internship/20250509144807842.png" alt="img"></p><h5 id="工具启动"><a href="#工具启动" class="headerlink" title="工具启动"></a>工具启动</h5><pre><code class=" mermaid">graph TD    A[命令行运行 valgrind --tool=&amp;lt;tool&amp;gt;] --&gt; B[valgrind 程序根据 tool 参数调用 execv]    B --&gt; C[加载对应的 Valgrind 工具插件]    C --&gt; D[Valgrind 内核初始化子系统&lt;br&gt;（地址空间管理器、内存分配器等）]    D --&gt; E[映射目标程序的 .text/.data 段&lt;br&gt;配置堆栈等]    E --&gt; F[初始化命令行参数&lt;br&gt;并加载工具插件]    F --&gt; G[加载更多子系统：&lt;br&gt;翻译表、信号处理、调度器、调试信息等]    G --&gt; H[准备完毕，开始执行目标程序第一条指令&lt;br&gt;进行 JIT 重编译（插桩）并运行]</code></pre><h5 id="中间表示（VEX）"><a href="#中间表示（VEX）" class="headerlink" title="中间表示（VEX）"></a>中间表示（VEX）</h5><p>在Valgrind的重编译的过程中，使用的中间表示是一种平台无关的语言——VEX，通过屏蔽硬件平台的差异性，节省了大量针对不同平台的插桩代码。</p><ul><li><p>Statement（结构体<code>IRStmt</code>）表示有副作用的操作，如写寄存器、写内存、临时变量赋值等。其中，Statement由Expression组成。</p></li><li><p>Expression (结构体<code>IRExpr</code>) 表示没有副作用的操作，如读内存、做算术运算等，这些操作可以包含子表达式和表达式树。</p></li><li><p>在Valgrind中，代码被分解成多个小的代码块，每个代码块里包含VEX的Statement列表。每个代码块的结构体是<code>IRSB</code>，<code>IRSB</code>是单入口多出口的，代码如下所示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span><br>   <span class="hljs-keyword">struct</span> &#123;<br>      IRTypeEnv* tyenv; <span class="hljs-comment">// 表明IRSB中每个临时变量的类型</span><br>      IRStmt**   stmts; <span class="hljs-comment">// VEX语句列表</span><br>      Int        stmts_size; <span class="hljs-comment">// Statements总长度</span><br>      Int        stmts_used; <span class="hljs-comment">// 实际上使用的Statements的数目</span><br>      IRExpr*    next; <span class="hljs-comment">// 下一跳的位置</span><br>      IRJumpKind jumpkind; <span class="hljs-comment">// 最后代码块结束jump的类型</span><br>      Int        offsIP; <span class="hljs-comment">// IP寄存器的偏移</span><br>   &#125;<br>   IRSB;<br></code></pre></td></tr></table></figure></li><li><p>Valgrind根据一定规则将代码划分为很多小代码块后，会进行以下八个阶段，将插件的分析代码进行插桩并优化：</p><pre><code class=" mermaid">graph TD    A[反汇编：机器码] --&gt; B[树状中间表示]    B --&gt; C[扁平中间表示]    C --&gt; D[带桩的扁平中间表示]:::important    D --&gt; E[优化的扁平中间表示]    E --&gt; F[汇编：带桩的树状中间表示]:::important    F --&gt; G[目标汇编代码]    G --&gt; H[寄存器优化的目标汇编代码]    H --&gt; I[机器码] classDef important fill:#fff3e0,stroke:#ff9800,stroke-width:2px;</code></pre></li><li><p>JIT执行：</p><pre><code class=" mermaid">flowchart TD    A[插桩后的机器码生成] --&gt; B[保存到固定大小的哈希表&lt;br&gt;（线性探测，80%阈值）]:::important    B --&gt; C&#123;哈希表是否达到80%容量？&#125;    C -- 是 --&gt; D[FIFO策略&lt;br&gt;丢弃1/8最旧的代码块]    C -- 否 --&gt; E[继续执行]    E --&gt; F[代码块执行完毕]    D --&gt; F    F --&gt; G[进入dispatcher（汇编实现）]    G --&gt; H&#123;dispatcher快速缓存命中？&#125;    H -- 是 --&gt; I[切换到下一个代码块（快速跳转）]    H -- 否 --&gt; J[进入scheduler（C实现）]    J --&gt; K&#123;哈希表中存在目标代码块？&#125;    K -- 是 --&gt; L[更新dispatcher缓存&lt;br&gt;并跳转]    K -- 否 --&gt; M[重新插桩编译&lt;br&gt;加入哈希表并更新dispatcher缓存]    M --&gt; L classDef important fill:#fff3e0,stroke:#ff9800,stroke-width:2px;</code></pre></li></ul><h5 id="Memcheck-检测原理"><a href="#Memcheck-检测原理" class="headerlink" title="Memcheck 检测原理"></a>Memcheck 检测原理</h5><p><strong>Memcheck</strong>检测内存问题的原理如下图所示：</p><p><img src="https://qnwang.oss-cn-hangzhou.aliyuncs.com/internship/20250509150159067.jpeg" alt="内存检查原理"></p><p>Memcheck 能够检测出内存问题，关键在于其建立了两个全局表。</p><ul><li>Valid-Value 表：对于进程的整个地址空间中的每一个字节(byte)，都有与之对应的 8 个 bits；对于 CPU 的每个寄存器，也有一个与之对应的 bit 向量。这些 bits 负责记录该字节或者寄存器值是否具有有效的、已初始化的值。</li><li>Valid-Address 表：对于进程整个地址空间中的每一个字节(byte)，还有与之对应的 1 个 bit，负责记录该地址是否能够被读写。</li></ul><p><img src="https://qnwang.oss-cn-hangzhou.aliyuncs.com/internship/20250509171919962.png" alt="memcheck影子内存"></p><p><strong>检测原理</strong>：</p><ul><li>当要读写内存中某个字节时，首先检查这个字节对应的 A bit。如果该A bit显示该位置是无效位置，memcheck 则报告读写错误。</li><li>内核（core）类似于一个虚拟的 CPU 环境，这样当内存中的某个字节被加载到真实的 CPU 中时，该字节对应的 V bit 也被加载到虚拟的 CPU 环境中。一旦寄存器中的值，被用来产生内存地址，或者该值能够影响程序输出，则 memcheck 会检查对应的V bits，如果该值尚未初始化，则会报告使用未初始化内存错误。</li></ul><h5 id="Valgrind回调Memcheck"><a href="#Valgrind回调Memcheck" class="headerlink" title="Valgrind回调Memcheck"></a>Valgrind回调Memcheck</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">mc_pre_clo_init</span><span class="hljs-params">( <span class="hljs-type">void</span> )</span></span>;<br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">mc_post_clo_init</span> <span class="hljs-params">( <span class="hljs-type">void</span> )</span></span>;<br><span class="hljs-function">IRSB* <span class="hljs-title">MC_</span><span class="hljs-params">(instrument)</span> <span class="hljs-params">( VgCallbackClosure* closure,</span></span><br><span class="hljs-params"><span class="hljs-function">                        IRSB* sb_in,</span></span><br><span class="hljs-params"><span class="hljs-function">                        <span class="hljs-type">const</span> VexGuestLayout* layout,</span></span><br><span class="hljs-params"><span class="hljs-function">                        <span class="hljs-type">const</span> VexGuestExtents* vge,</span></span><br><span class="hljs-params"><span class="hljs-function">                        <span class="hljs-type">const</span> VexArchInfo* archinfo_host,</span></span><br><span class="hljs-params"><span class="hljs-function">                        IRType gWordTy, IRType hWordTy )</span></span>;<br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">mc_fini</span> <span class="hljs-params">( Int exitcode )</span></span>;<br></code></pre></td></tr></table></figure><p>上述四个接口，由Valgrind在不同阶段调用。其中，<code>mc_pre_clo_init</code> 和 <code>mc_post_clo_init</code>用于初始化memcheck插件，<code>MC_(instrument)</code> 是在scheduler需要translate的插桩阶段会调用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++">   <span class="hljs-built_in">VG_</span>(track_new_mem_startup)     ( mc_new_mem_startup );<br>   <span class="hljs-built_in">VG_</span>(track_new_mem_mmap)        ( mc_new_mem_mmap );<br>   <span class="hljs-built_in">VG_</span>(track_change_mem_mprotect) ( mc_new_mem_mprotect );<br>   <span class="hljs-built_in">VG_</span>(track_copy_mem_remap)      ( <span class="hljs-built_in">MC_</span>(copy_address_range_state) );<br>   <span class="hljs-built_in">VG_</span>(track_die_mem_stack_signal)( <span class="hljs-built_in">MC_</span>(make_mem_noaccess) );<br>   <span class="hljs-built_in">VG_</span>(track_die_mem_brk)         ( <span class="hljs-built_in">MC_</span>(make_mem_noaccess) );<br>   <span class="hljs-built_in">VG_</span>(track_die_mem_munmap)      ( <span class="hljs-built_in">MC_</span>(make_mem_noaccess) );<br>...<br>   <span class="hljs-built_in">VG_</span>(track_die_mem_stack)       ( mc_die_mem_stack     );<br>   <span class="hljs-built_in">VG_</span>(track_ban_mem_stack)       ( <span class="hljs-built_in">MC_</span>(make_mem_noaccess) );<br>   <span class="hljs-built_in">VG_</span>(track_pre_mem_read)        ( check_mem_is_defined );<br>   <span class="hljs-built_in">VG_</span>(track_pre_mem_read_asciiz) ( check_mem_is_defined_asciiz );<br>   <span class="hljs-built_in">VG_</span>(track_pre_mem_write)       ( check_mem_is_addressable );<br>   <span class="hljs-built_in">VG_</span>(track_post_mem_write)      ( mc_post_mem_write );<br>   <span class="hljs-built_in">VG_</span>(track_post_reg_write)                  ( mc_post_reg_write );<br>   <span class="hljs-built_in">VG_</span>(track_post_reg_write_clientcall_return)( mc_post_reg_write_clientcall );<br></code></pre></td></tr></table></figure><p>上述这些 <code>VG_(track_*)</code> 函数是用于向Valgrind内核注册相应的事件监控，这些事件难以通过插桩来拦截的，如堆块的分配、堆栈指针的修改、信号处理等。当注册的事件发生时，Valgrind内核会调用Memcheck注册的函数。</p><h4 id="工具包"><a href="#工具包" class="headerlink" title="工具包"></a>工具包</h4><h5 id="Memcheck※"><a href="#Memcheck※" class="headerlink" title="Memcheck※"></a>Memcheck※</h5><p>Memcheck检测内存管理问题，主要针对C和C++程序。当一个程序在Memcheck的监督下运行时，所有对内存的读取和写入都会被检查，并拦截对malloc&#x2F;new&#x2F;free&#x2F;delete的调用。因此，Memcheck可以检测您的程序是否：</p><ul><li>访问不应该访问的内存（尚未分配的区域、已释放的区域、超过堆块末尾的区域、堆栈中不可访问的区域）。</li><li>以危险的方式使用未初始化的值。</li><li>内存泄漏。</li><li>对堆块执行错误的释放（双重释放、不匹配的释放）。</li><li>将重叠的源内存块和目标内存块传递给memcpy()和相关函数。</li></ul><p>Memcheck会在这些错误发生时立即报告，给出发生错误的源行号，以及为到达该行而调用的函数的堆栈跟踪。Memcheck在字节级别跟踪可寻址性，在位级别跟踪值的初始化。因此，它可以检测单个未初始化位的使用，并且不会报告位字段操作中的虚假错误。Memcheck运行的程序比正常速度慢10-30倍。</p><h5 id="Cachegrind"><a href="#Cachegrind" class="headerlink" title="Cachegrind"></a>Cachegrind</h5><p>Cachegrind是一个缓存探查器。它对CPU中的I1、D1和L2缓存执行详细的模拟，因此可以准确地确定代码中缓存未命中的来源。它通过每个函数、每个模块和整个程序摘要来识别每行源代码的缓存未命中、内存引用和执行的指令的数量。它适用于用任何语言编写的程序。Cachegrind运行的程序比正常速度慢20-100倍。</p><h5 id="Callgrind"><a href="#Callgrind" class="headerlink" title="Callgrind"></a>Callgrind</h5><p>Josef Weidendorfer的Callgrind是对Cachegrind的扩展。它提供了Cachegrind所做的所有信息，以及关于调用图的额外信息。它在3.2.0版本中被集成到Valgrind的主版本中。单独提供的是一个令人惊叹的可视化工具<a href="https://kcachegrind.sourceforge.net/html/Home.html">KCachegrind</a>，它可以更好地概述Callgrind收集的数据；它还可以用于可视化Cachegrind的输出。</p><h5 id="Massif"><a href="#Massif" class="headerlink" title="Massif"></a>Massif</h5><p>Massif是一个堆探查器。它通过获取程序堆的定期快照来执行详细的堆评测。它生成一个图表，显示堆使用情况随时间的变化，包括程序中哪些部分负责最多内存分配的信息。该图由一个文本或HTML文件补充，该文件包括更多信息，用于确定在哪里分配了最多的内存。Massif运行程序的速度比正常速度慢20倍。</p><h5 id="Helgrind"><a href="#Helgrind" class="headerlink" title="Helgrind"></a>Helgrind</h5><p>Helgrind是一个线程调试器，用于在多线程程序中查找数据竞赛。它查找由多个（POSIX p-）线程访问的内存位置，但找不到一致使用的（pthread_mutex_）锁。这样的位置指示线程之间缺少同步，并且可能导致难以找到与定时相关的问题。它对任何使用pthreads的程序都很有用。这是一个有点实验性的工具，所以这里特别欢迎您的反馈。</p><h5 id="DRD"><a href="#DRD" class="headerlink" title="DRD"></a>DRD</h5><p>DRD是一种用于检测多线程C和C++程序中错误的工具。该工具适用于任何使用POSIX线程原语或使用在POSIX线程基元之上构建的线程概念的程序。虽然Helgrind可以检测到违反锁定顺序的情况，但对于大多数程序来说，DRD执行其分析所需的内存较少。</p><h5 id="Lackey，Nulgrind"><a href="#Lackey，Nulgrind" class="headerlink" title="Lackey，Nulgrind"></a>Lackey，Nulgrind</h5><p>Lackey和Nulgrind也包括在Valgrind分布中。它们做的不多，只是为了测试和演示。</p><h5 id="DHAT"><a href="#DHAT" class="headerlink" title="DHAT"></a>DHAT</h5><p>DHAT是一个用于检查程序如何使用堆分配的工具。它跟踪分配的块，并检查每次内存访问，以找到要访问的块（如果有的话）。它还附带了一个GUI，以便于探索配置文件结果</p><h4 id="源码路径-1"><a href="#源码路径-1" class="headerlink" title="源码路径"></a>源码路径</h4><table><thead><tr><th>步骤</th><th>入口源码</th><th>阅读重点</th></tr></thead><tbody><tr><td>1️⃣ 启动流程</td><td><code>coregrind/m_main.c</code> 中的 <code>main()</code> 函数</td><td>Valgrind 启动逻辑、注册工具、加载用户程序</td></tr><tr><td>2️⃣ 工具注册</td><td><code>memcheck/mc_main.c</code> 中的 <code>mc_pre_clo_init()</code></td><td>Memcheck 是如何作为插件注册并接管分析任务的</td></tr><tr><td>3️⃣ 插桩入口</td><td><code>memcheck/mc_translate.c</code> 中的 <code>MC_(instrument)</code></td><td>如何在 VEX IR 上插入 shadow memory 逻辑来检测读写</td></tr><tr><td>4️⃣ shadow memory 实现</td><td><code>memcheck/mc_machine.c</code>、<code>mc_memory.c</code></td><td>如何为用户空间内存建立 shadow 映射<br>如何检查是否初始化、是否重叠写入等</td></tr><tr><td>5️⃣ 报错逻辑</td><td><code>memcheck/mc_errors.c</code></td><td>各类内存错误的触发条件、错误消息打印函数</td></tr><tr><td>6️⃣ VEX IR 转换（了解即可）</td><td><code>VEX/pub/libvex.h</code>、<code>coregrind/m_translate.c</code></td><td>了解如何将指令翻译成 IR 并应用插件逻辑</td></tr></tbody></table><h4 id="源码分析-1"><a href="#源码分析-1" class="headerlink" title="源码分析"></a>源码分析</h4><h5 id="启动流程"><a href="#启动流程" class="headerlink" title="启动流程"></a>启动流程</h5><pre><code class=" mermaid">graph TD  A[&quot;coregrind/m_main.c/valgrind_main()&quot;] --&gt; B[&quot;启动调试信息&quot;]  A --&gt; C[&quot;启动地址空间管理器&quot;]  A --&gt; D[&quot;启动动态内存管理器&quot;]  B --&gt; E[&quot;识别cpu类型&quot;]  C --&gt; E  D --&gt; E  E --&gt; F[&quot;识别工具类型&quot;]  F --&gt; G[&quot;设置默认的 vex 控制参数&quot;]  G --&gt; H[&quot;初始化工具tl_pre_clo_init()/tool_post_clo_init()&quot;]:::important  H --&gt; J[&quot;初始化调度器&quot;]  J --&gt; K[&quot;设置一些堆栈状态，运行&quot;] classDef important fill:#fff3e0,stroke:#ff9800,stroke-width:2px;</code></pre><h5 id="工具注册（以memcheck为例）"><a href="#工具注册（以memcheck为例）" class="headerlink" title="工具注册（以memcheck为例）"></a>工具注册（以memcheck为例）</h5><pre><code class=" mermaid">graph TD  A[&quot;memcheck/mc_main.c/mc_pre_clo_init()&quot;] --&gt; B[&quot;VG_(basic_tool_funcs)&quot;]  B --&gt; C[&quot;插桩入口MC_(instrument)&quot;]:::important  A --&gt; D[&quot;VG_(needs_tool_errors)&quot;]  D --&gt; E[&quot;报错逻辑入口MC_(eq_Error)&quot;]  A --&gt; F[&quot;初始化shadow映射init_shadow_memory()&quot;]  classDef important fill:#fff3e0,stroke:#ff9800,stroke-width:2px;</code></pre><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// mermaid --启动调试信息</span><br><span class="hljs-comment">// memcheck/mc_main.c</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">mc_pre_clo_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>   ……<br>   <span class="hljs-comment">// 注册工具，插桩入口</span><br>   <span class="hljs-built_in">VG_</span>(basic_tool_funcs)          (mc_post_clo_init,<br>                                   <span class="hljs-built_in">MC_</span>(instrument),<br>                                   mc_fini);<br>   ……<br>   <span class="hljs-comment">// 报错逻辑入口</span><br>   <span class="hljs-built_in">VG_</span>(needs_tool_errors)         (<span class="hljs-built_in">MC_</span>(eq_Error),<br>                                   <span class="hljs-built_in">MC_</span>(before_pp_Error),<br>                                   <span class="hljs-built_in">MC_</span>(pp_Error),<br>                                   True,<span class="hljs-comment">/*show TIDs for errors*/</span><br>                                   <span class="hljs-built_in">MC_</span>(update_Error_extra),<br>                                   <span class="hljs-built_in">MC_</span>(is_recognised_suppression),<br>                                   <span class="hljs-built_in">MC_</span>(read_extra_suppression_info),<br>                                   <span class="hljs-built_in">MC_</span>(error_matches_suppression),<br>                                   <span class="hljs-built_in">MC_</span>(get_error_name),<br>                                   <span class="hljs-built_in">MC_</span>(get_extra_suppression_info),<br>                                   <span class="hljs-built_in">MC_</span>(print_extra_suppression_use),<br>                                   <span class="hljs-built_in">MC_</span>(update_extra_suppression_use));<br>   ……<br>   <span class="hljs-comment">// shadow映射</span><br>   <span class="hljs-built_in">init_shadow_memory</span>();<br>   ……<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="实现的不同之处"><a href="#实现的不同之处" class="headerlink" title="实现的不同之处"></a>实现的不同之处</h3><table><thead><tr><th></th><th>AddressSanitizer (ASan)</th><th>Valgrind</th></tr></thead><tbody><tr><td>实现方式</td><td>编译期插桩（基于 Clang&#x2F;LLVM 插入检查代码）</td><td>动态二进制插桩（运行时在二进制层面插桩）</td></tr><tr><td>插桩时机</td><td>编译时</td><td>运行时</td></tr><tr><td>插桩方式</td><td>修改 LLVM IR，插入 shadow memory 检查逻辑</td><td>使用 JIT 模拟器重写程序指令</td></tr><tr><td>内存状态追踪</td><td>使用 Shadow Memory，通常 1:8 映射</td><td>通过完整模拟 CPU 访问并维护虚拟内存状态</td></tr><tr><td>运行时依赖</td><td>编译后程序链接 runtime 库（compiler-rt）</td><td>不修改原程序，Valgrind 作为宿主启动目标程序</td></tr><tr><td>性能开销</td><td>较低（~2x）</td><td>较高（10x-50x）</td></tr><tr><td>可移植性</td><td>与编译器强绑定（Clang）</td><td>与平台强绑定（对 x86&#x2F;x86_64 支持好）</td></tr><tr><td>检测能力</td><td>精度高但主要针对 Heap&#x2F;Stack&#x2F;Global 的越界&#x2F;Use-After-Free</td><td>检测更全面，包含内存泄漏、未初始化变量、未定义行为等</td></tr><tr><td>可扩展性</td><td>可通过编译器 Pass 扩展</td><td>可通过开发工具插件（如 Helgrind, DRD）扩展</td></tr></tbody></table><h2 id="三、安装与使用方式"><a href="#三、安装与使用方式" class="headerlink" title="三、安装与使用方式"></a>三、安装与使用方式</h2><h3 id="ASan-使用"><a href="#ASan-使用" class="headerlink" title="ASan 使用"></a>ASan 使用</h3><h4 id="安装Asan"><a href="#安装Asan" class="headerlink" title="安装Asan"></a>安装Asan</h4><p>在 Ubuntu 上，<strong>ASan (AddressSanitizer)</strong> <strong>不需要单独安装</strong>，因为它是 <strong>GCC</strong> 或 <strong>Clang</strong> 编译器自带的功能模块。你只需要确保你的 <strong>GCC</strong> 或 <strong>Clang</strong> 版本支持 ASan（一般 Ubuntu 18.04+ 默认都支持）。</p><h4 id="使用Asan"><a href="#使用Asan" class="headerlink" title="使用Asan"></a>使用Asan</h4><ol><li><p>使用要求：编译时加上 <code>-fsanitize=address -g</code>（<code>-fsanitize=address</code>：启用 AddressSanitizer，<code>-g</code>：生成调试符号，方便错误定位到具体源码行号）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># eg</span><br>g++ -fsanitize=address -g your_code.cpp -o your_program<br><span class="hljs-comment"># -fno-omit-frame-pointer 让栈追溯信息更加友好</span><br></code></pre></td></tr></table></figure></li><li><p>编译后直接运行，出现非法内存访问、溢出、use-after-free 等时，ASan 会自动终止程序并输出详细错误栈信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./your_program<br></code></pre></td></tr></table></figure></li><li><p>进阶配置：可以通过环境变量控制 ASan 行为：</p><ul><li><p>显示更多详细信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> ASAN_OPTIONS=verbosity=1<br></code></pre></td></tr></table></figure></li><li><p>打印出泄漏检测（需要加 <code>-fsanitize=leak</code>）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> ASAN_OPTIONS=detect_leaks=1<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># eg：</span><br><span class="hljs-built_in">export</span> ASAN_OPTIONS=detect_leaks=1:abort_on_error=1<br>./your_program<br></code></pre></td></tr></table></figure><table><thead><tr><th><strong>flag</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>halt_on_error</td><td>默认为1，ASan检测到错误后会中止程序设为0后，ASan检测到错误后不会中止程序</td></tr><tr><td>log_path</td><td>设置错误信息的输出路径</td></tr><tr><td>detect_stack_use_after_return</td><td>是否检测use after return错误默认为0，即关闭该检测功能</td></tr><tr><td>help&#x3D;1</td><td>输出所有支持的参数</td></tr></tbody></table></li></ul></li></ol><ul><li>编译加上 <code>-fsanitize=address -g</code></li></ul><p>更多ASAN_OPTIONS可以参考：<a href="https://github.com/google/sanitizers/wiki/AddressSanitizerFlags">https://github.com/google/sanitizers/wiki/AddressSanitizerFlags</a></p><h3 id="Valgrind-使用"><a href="#Valgrind-使用" class="headerlink" title="Valgrind 使用"></a>Valgrind 使用</h3><h4 id="安装-Valgrind"><a href="#安装-Valgrind" class="headerlink" title="安装 Valgrind"></a>安装 Valgrind</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> apt install valgrind <br></code></pre></td></tr></table></figure><p><img src="https://qnwang.oss-cn-hangzhou.aliyuncs.com/internship/20250426221902305.png" alt="image-20250426221902277"></p><h4 id="使用valgrind"><a href="#使用valgrind" class="headerlink" title="使用valgrind"></a>使用valgrind</h4><ol><li>使用要求：编译程序时使用调试信息选项 -g（使用编译程序以-g包含调试信息，以便 Memcheck 的错误消息包含准确的行号。-O0如果您可以忍受速度变慢，使用也是一个好主意。 -O1错误消息中的行号可能不准确，但通常情况下，在编译的代码上运行 Memcheck-O1效果很好，而且与直接运行相比，速度提升-O0非常显著。 -O2不建议使用及以上版本，因为 Memcheck 偶尔会报告实际上并不存在未初始化值的错误）。</li><li>使用方法：使用 valgrind 运行程序：valgrind –leak-check&#x3D;full .&#x2F;your_program</li><li>常用选项：<ul><li>–leak-check&#x3D;full：启用详细的内存泄漏检测。</li><li>–track-origins&#x3D;yes：在内存未初始化时，报告其来源。</li><li>–log-file&#x3D;filename：将 Valgrind 的输出写入文件 filename</li></ul></li></ol><h2 id="四、检测能力比较"><a href="#四、检测能力比较" class="headerlink" title="四、检测能力比较"></a>四、检测能力比较</h2><table><thead><tr><th>比较项</th><th>ASan</th><th>Valgrind</th></tr></thead><tbody><tr><td>检测内存越界</td><td>✅ 高效准确</td><td>✅ 高效准确</td></tr><tr><td>检测内存泄漏</td><td>✅（可选配 LeakSanitizer）</td><td>✅（默认内置）</td></tr><tr><td>检测未初始化读</td><td>❌（需要另加 MSan）</td><td>✅</td></tr><tr><td>检测堆栈溢出</td><td>✅（有限支持）</td><td>✅（通过 Memcheck 支持）</td></tr><tr><td>检测速度</td><td>🔥 极快（通常 2x-3x 原程序速度）</td><td>🐢 较慢（通常 10x-50x 原程序速度）</td></tr><tr><td>支持大程序</td><td>✅ 支持大内存程序</td><td>❌ 容易内存爆掉</td></tr><tr><td>平台支持</td><td>Linux、macOS、Windows (部分)</td><td>Linux、macOS（Windows 支持差）</td></tr></tbody></table><h2 id="五、输出示例与解读"><a href="#五、输出示例与解读" class="headerlink" title="五、输出示例与解读"></a>五、输出示例与解读</h2><h3 id="ASan-错误输出示例"><a href="#ASan-错误输出示例" class="headerlink" title="ASan 错误输出示例"></a>ASan 错误输出示例</h3><h4 id="验证代码"><a href="#验证代码" class="headerlink" title="验证代码"></a>验证代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span> </span>&#123;<br>  <span class="hljs-type">int</span> *array = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">100</span>];<br>  <span class="hljs-keyword">delete</span> [] array;<br>  <span class="hljs-keyword">return</span> array[argc];  <span class="hljs-comment">// BOOM</span><br>&#125;<br><span class="hljs-comment">// RUN: clang -O -g -fsanitize=address %t &amp;&amp; ./a.out</span><br></code></pre></td></tr></table></figure><h4 id="验证结果"><a href="#验证结果" class="headerlink" title="验证结果"></a>验证结果</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++">=================================================================<br>==<span class="hljs-number">6254</span>== ERROR: AddressSanitizer: heap-use-after-free on address <span class="hljs-number">0x603e0001fc64</span> at pc <span class="hljs-number">0x417f6a</span> bp <span class="hljs-number">0x7fff626b3250</span> sp <span class="hljs-number">0x7fff626b3248</span><br>READ of size <span class="hljs-number">4</span> at <span class="hljs-number">0x603e0001fc64</span> thread T0<br>    #<span class="hljs-number">0</span> <span class="hljs-number">0x417f69</span> in main example_UseAfterFree.cc:<span class="hljs-number">5</span><br>    #<span class="hljs-number">1</span> <span class="hljs-number">0x7fae62b5076c</span> (/lib/x86_64-linux-gnu/libc.so<span class="hljs-number">.6</span><span class="hljs-number">+0x2176c</span>)<br>    #<span class="hljs-number">2</span> <span class="hljs-number">0x417e54</span> (a.out<span class="hljs-number">+0x417e54</span>)<br><span class="hljs-number">0x603e0001fc64</span> is located <span class="hljs-number">4</span> bytes inside of <span class="hljs-number">400</span>-byte region [<span class="hljs-number">0x603e0001fc60</span>,<span class="hljs-number">0x603e0001fdf0</span>)<br>freed by thread T0 here:<br>    #<span class="hljs-number">0</span> <span class="hljs-number">0x40d4d2</span> in <span class="hljs-keyword">operator</span> <span class="hljs-keyword">delete</span>[](<span class="hljs-type">void</span>*) /home/kcc/llvm/projects/compiler-rt/lib/asan/asan_new_delete.cc:<span class="hljs-number">61</span><br>    #<span class="hljs-number">1</span> <span class="hljs-number">0x417f2e</span> in main example_UseAfterFree.cc:<span class="hljs-number">4</span><br>previously allocated by thread T0 here:<br>    #<span class="hljs-number">0</span> <span class="hljs-number">0x40d312</span> in <span class="hljs-keyword">operator</span> <span class="hljs-keyword">new</span>[](<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) /home/kcc/llvm/projects/compiler-rt/lib/asan/asan_new_delete.cc:<span class="hljs-number">46</span><br>    #<span class="hljs-number">1</span> <span class="hljs-number">0x417f1e</span> in main example_UseAfterFree.cc:<span class="hljs-number">3</span><br>Shadow bytes around the buggy address:<br>  <span class="hljs-number">0x1c07c0003f30</span>: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa<br>  <span class="hljs-number">0x1c07c0003f40</span>: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa<br>  <span class="hljs-number">0x1c07c0003f50</span>: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa<br>  <span class="hljs-number">0x1c07c0003f60</span>: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa<br>  <span class="hljs-number">0x1c07c0003f70</span>: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa<br>=&gt;<span class="hljs-number">0x1c07c0003f80</span>: fa fa fa fa fa fa fa fa fa fa fa fa[fd]fd fd fd<br>  <span class="hljs-number">0x1c07c0003f90</span>: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd<br>  <span class="hljs-number">0x1c07c0003fa0</span>: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd<br>  <span class="hljs-number">0x1c07c0003fb0</span>: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fa fa<br>  <span class="hljs-number">0x1c07c0003fc0</span>: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa<br>  <span class="hljs-number">0x1c07c0003fd0</span>: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa<br>Shadow byte <span class="hljs-built_in">legend</span> (one shadow byte represents <span class="hljs-number">8</span> application bytes):<br>  Addressable:           <span class="hljs-number">00</span><br>  Partially addressable: <span class="hljs-number">01</span> <span class="hljs-number">02</span> <span class="hljs-number">03</span> <span class="hljs-number">04</span> <span class="hljs-number">05</span> <span class="hljs-number">06</span> <span class="hljs-number">07</span> <br>  Heap left redzone:     fa<br>  Heap righ redzone:     fb<br>  Freed Heap region:     fd<br>  Stack left redzone:    f1<br>  Stack mid redzone:     f2<br>  Stack right redzone:   f3<br>  Stack partial redzone: f4<br>  Stack after <span class="hljs-keyword">return</span>:    f5<br>  Stack use after scope: f8<br>  Global redzone:        f9<br>  Global init order:     f6<br>  Poisoned by user:      f7<br>  ASan internal:         fe<br>==<span class="hljs-number">6254</span>== ABORTING<br></code></pre></td></tr></table></figure><h4 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs sh">1. 错误类型摘要<br>    <span class="hljs-comment"># ASan 检测到错误类型是 heap-use-after-free，表示访问了已经释放的堆内存。</span><br>    ==6254== ERROR: AddressSanitizer: heap-use-after-free on address 0x603e0001fc64<br><br>2. 出错位置<br>    <span class="hljs-comment"># 错误发生在 example_UseAfterFree.cc 文件的第5行 main 函数中。</span><br>    <span class="hljs-comment"># 出错时正在读取（READ）4字节的数据。</span><br>    READ of size 4 at 0x603e0001fc64 thread T0<br>      <span class="hljs-comment">#0 0x417f69 in main example_UseAfterFree.cc:5</span><br>      <span class="hljs-comment">#1 0x7fae62b5076c (/lib/x86_64-linux-gnu/libc.so.6+0x2176c)</span><br>      <span class="hljs-comment">#2 0x417e54 (a.out+0x417e54)</span><br><br>3. 内存分配与释放信息<br>    <span class="hljs-comment"># 这块内存是在 example_UseAfterFree.cc 文件第3行通过 new[] 分配的。</span><br>    previously allocated by thread T0 here:<br>      <span class="hljs-comment">#0 0x40d312 in operator new[](unsigned long)</span><br>      <span class="hljs-comment">#1 0x417f1e in main example_UseAfterFree.cc:3</span><br><br>    <span class="hljs-comment"># 这块内存已经在第4行通过 delete[] 被释放。</span><br>    freed by thread T0 here:<br>      <span class="hljs-comment">#0 0x40d4d2 in operator delete[](void*)</span><br>      <span class="hljs-comment">#1 0x417f2e in main example_UseAfterFree.cc:4</span><br><br>4. Shadow Memory 状态<br>    <span class="hljs-comment"># 出错地址周围的 Shadow Memory 信息如下：</span><br>    Shadow bytes around the buggy address:<br>      0x1c07c0003f80: fa fa fa fa fa fa fa fa fa fa fa fa [fd]fd fd fd<br>    <span class="hljs-comment"># 其中 fd 表示 &quot;Freed Heap Region&quot;，即已经释放的堆内存。</span><br>    <span class="hljs-comment"># 说明正在访问一块已经释放的堆区域，因此发生了 heap-use-after-free 错误。</span><br><br>5. Shadow Byte Legend<br>    <span class="hljs-comment"># Shadow Byte 各个标记含义：</span><br>    - 00: 正常可访问内存<br>    - fd: 已释放的堆内存（Freed Heap region）<br>    - fa: 堆红区（Heap redzone，用于保护越界）<br></code></pre></td></tr></table></figure><p>更多例子在：<a href="https://github.com/google/sanitizers/wiki/addresssanitizer%E7%9A%84introduction%E9%83%A8%E5%88%86">https://github.com/google/sanitizers/wiki/addresssanitizer的introduction部分</a></p><h3 id="Valgrind-输出示例"><a href="#Valgrind-输出示例" class="headerlink" title="Valgrind 输出示例"></a>Valgrind 输出示例</h3><h4 id="验证代码-1"><a href="#验证代码-1" class="headerlink" title="验证代码"></a>验证代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span>* p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">10</span>); <span class="hljs-comment">// 只申请不回收，leak</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br>    <span class="hljs-built_in">func</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// sh命令</span><br>g++ test.cpp -g<br>valgrind --leak-check=full ./a.out<br></code></pre></td></tr></table></figure><h4 id="验证结果-1"><a href="#验证结果-1" class="headerlink" title="验证结果"></a>验证结果</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root:~/stutest]# valgrind --leak-check=full ./a.out <br>==1536437== Memcheck, a memory error detector<br>==1536437== Copyright (C) 2002-2017, and GNU GPL<span class="hljs-string">&#x27;d, by Julian Seward et al.</span><br><span class="hljs-string">==1536437== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info</span><br><span class="hljs-string">==1536437== Command: ./a.out</span><br><span class="hljs-string">==1536437== </span><br><span class="hljs-string">==1536437== </span><br><span class="hljs-string">==1536437== HEAP SUMMARY: # 堆摘要</span><br><span class="hljs-string">==1536437==     in use at exit: 4 bytes in 1 blocks</span><br><span class="hljs-string">==1536437==   total heap usage: 2 allocs, 1 frees, 72,708 bytes allocated</span><br><span class="hljs-string">==1536437== </span><br><span class="hljs-string">==1536437== 4 bytes in 1 blocks are definitely lost in loss record 1 of 1</span><br><span class="hljs-string">==1536437==    at 0x48657B8: operator new(unsigned long) (in /usr/libexec/valgrind/vgpreload_memcheck-arm64-linux.so)</span><br><span class="hljs-string">==1536437==    by 0x1088E3: func() (test.cpp:4)</span><br><span class="hljs-string">==1536437==    by 0x108907: main (test.cpp:9)</span><br><span class="hljs-string">==1536437== </span><br><span class="hljs-string">==1536437== LEAK SUMMARY: # 泄露摘要</span><br><span class="hljs-string">==1536437==    definitely lost: 4 bytes in 1 blocks</span><br><span class="hljs-string">==1536437==    indirectly lost: 0 bytes in 0 blocks</span><br><span class="hljs-string">==1536437==      possibly lost: 0 bytes in 0 blocks</span><br><span class="hljs-string">==1536437==    still reachable: 0 bytes in 0 blocks</span><br><span class="hljs-string">==1536437==         suppressed: 0 bytes in 0 blocks</span><br><span class="hljs-string">==1536437== </span><br><span class="hljs-string">==1536437== For lists of detected and suppressed errors, rerun with: -s</span><br><span class="hljs-string">==1536437== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)</span><br></code></pre></td></tr></table></figure><h4 id="结果分析-1"><a href="#结果分析-1" class="headerlink" title="结果分析"></a>结果分析</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh">1. 堆摘要：<br><span class="hljs-comment"># 在程序结束时，有 4 字节的内存仍然在使用，这意味着有一块 4 字节的内存没有被释放。</span><br>    <span class="hljs-keyword">in</span> use at <span class="hljs-built_in">exit</span>: 4 bytes <span class="hljs-keyword">in</span> 1 blocks<br>    <span class="hljs-comment"># 程序总共进行了 2 次内存分配操作（allocs），但是只进行了 1 次内存释放操作（frees），总共分配了 72,708 字节的内存。</span><br>    total heap usage: 2 allocs, 1 frees, 72,708 bytes allocated<br>2. 泄漏摘要<br><span class="hljs-comment"># Valgrind 确认有 4 字节内存泄漏，这次泄漏的详细信息如下：</span><br>4 bytes <span class="hljs-keyword">in</span> 1 blocks are definitely lost <span class="hljs-keyword">in</span> loss record 1 of 1<br><span class="hljs-comment"># 内存是在调用 operator new 时分配的，这通常表示你使用了 new 操作符分配了内存。</span><br>at 0x486578B: operator new(unsigned long) (<span class="hljs-keyword">in</span> /usr/libexec/valgrind/vgpreload_memcheck-arm64-linux.so)<br><span class="hljs-comment"># func() 函数中进行了内存分配，这是导致内存泄漏的地方。</span><br>by 0x1088E3: func() (test.cpp:4)<br><span class="hljs-comment"># main 函数调用了 func()，导致了内存泄漏。</span><br>by 0x108907: main (test.cpp:9)<br>3. 错误摘要<br><span class="hljs-comment"># 总共检测到 1 个内存泄漏错误，且没有任何错误被抑制。</span><br>    ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)<br></code></pre></td></tr></table></figure><h3 id="常见内存泄漏的场景"><a href="#常见内存泄漏的场景" class="headerlink" title="常见内存泄漏的场景"></a>常见内存泄漏的场景</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">memoryLeak1</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 简单的内存泄漏，没有释放分配的内存</span><br>    <span class="hljs-type">int</span>* leakyArray = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">100</span>];<br>    <span class="hljs-comment">// 忘记释放 leakyArray</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">memoryLeak2</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 动态分配的内存覆盖了原先分配的内存，导致原内存泄漏</span><br>    <span class="hljs-type">char</span>* leakyString = <span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[<span class="hljs-number">25</span>];<br>    <span class="hljs-built_in">strcpy</span>(leakyString, <span class="hljs-string">&quot;Initial allocation&quot;</span>);<br>    <br>    <span class="hljs-comment">// 重新分配，原内存未释放</span><br>    leakyString = <span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[<span class="hljs-number">50</span>];<br>    <span class="hljs-built_in">strcpy</span>(leakyString, <span class="hljs-string">&quot;Reallocation causes leak&quot;</span>);<br><br>    <span class="hljs-keyword">delete</span>[] leakyString; <span class="hljs-comment">// 释放第二次分配的内存</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">memoryLeak3</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 部分内存泄漏，未释放结构体中的某些成员</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> &#123;<br>        <span class="hljs-type">int</span>* value;<br>        Node* next;<br>    &#125;;<br><br>    Node* node = <span class="hljs-keyword">new</span> Node;<br>    node-&gt;value = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">10</span>);<br>    node-&gt;next = <span class="hljs-literal">nullptr</span>;<br><br>    <span class="hljs-keyword">delete</span> node; <span class="hljs-comment">// 只释放了 node，没有释放 node-&gt;value</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">memoryLeak4</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 使用未初始化的指针</span><br>    <span class="hljs-type">int</span>* uninitializedPtr;<br>    *uninitializedPtr = <span class="hljs-number">42</span>; <span class="hljs-comment">// 未定义行为</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">memoryLeak1</span>();<br>    <span class="hljs-built_in">memoryLeak2</span>();<br>    <span class="hljs-built_in">memoryLeak3</span>();<br>    <span class="hljs-built_in">memoryLeak4</span>();<br><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Done testing memory leaks!&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="六、常见问题与坑"><a href="#六、常见问题与坑" class="headerlink" title="六、常见问题与坑"></a>六、常见问题与坑</h2><h3 id="ASan-常见问题"><a href="#ASan-常见问题" class="headerlink" title="ASan 常见问题"></a><strong>ASan 常见问题</strong></h3><ul><li>与某些库冲突（如 glibc 的 hook）</li><li>需要匹配 libc 版本</li><li>asan版本程序在Linux环境下运行时会额外申请20TB的虚拟内存，会增加大量的虚拟内存使用<ul><li>需要确保&#x2F;proc&#x2F;sys&#x2F;vm&#x2F;overcommit_memory的值不为2</li><li>这也可以作为检验ASan是否工作的标志</li></ul></li><li>asan工具不是万能的，必须要跑到有问题的代码才可以暴露出来</li></ul><h3 id="Valgrind-常见问题"><a href="#Valgrind-常见问题" class="headerlink" title="Valgrind 常见问题"></a><strong>Valgrind 常见问题</strong></h3><ul><li>运行特别慢</li><li>不支持 AVX-512、SIMD 优化程序</li><li>对于一些静态分配或在堆栈上分配的数组的超出范围的读取或写入，Valgrind 可能无法检测到</li><li>在检测某些复杂的内存错误场景时，可能会出现误报或漏报的情况</li></ul><h2 id="七、实战应用场景建议"><a href="#七、实战应用场景建议" class="headerlink" title="七、实战应用场景建议"></a>七、实战应用场景建议</h2><h3 id="什么时候优先用-ASan？"><a href="#什么时候优先用-ASan？" class="headerlink" title="什么时候优先用 ASan？"></a>什么时候优先用 ASan？</h3><ul><li>开发阶段，快速找到内存错误</li><li>代码量很大的时候用Asan</li></ul><h3 id="什么时候优先用-Valgrind？"><a href="#什么时候优先用-Valgrind？" class="headerlink" title="什么时候优先用 Valgrind？"></a>什么时候优先用 Valgrind？</h3><ul><li>找难以发现的泄漏和未初始化读问题，做深入分析</li></ul><table><thead><tr><th>场景&#x2F;目标</th><th>适用工具</th><th>原因说明</th></tr></thead><tbody><tr><td>1. 内存越界访问检测</td><td>✅ ASan &amp; ✅ Valgrind</td><td>两者均可，但 ASan 检测更快且栈信息更清晰</td></tr><tr><td>2. Use-After-Free 检测</td><td>✅ ASan &amp; ✅ Valgrind</td><td>都能检测，但 ASan 执行效率更高</td></tr><tr><td>3. 内存泄漏检测</td><td>✅ Valgrind（Memcheck）</td><td>ASan 对泄漏检测不如 Valgrind 精细（除非搭配 LeakSanitizer）</td></tr><tr><td>4. 未初始化内存使用检测</td><td>✅ Valgrind</td><td>ASan 无法检测未初始化使用，Valgrind 的 Undef-Value 检测更强</td></tr><tr><td>5. 并发线程数据竞争检测</td><td>🔶 DRD&#x2F;Helgrind（Valgrind 插件）</td><td>ASan 无法检测数据竞争，需用 TSan；Valgrind 插件较弱</td></tr><tr><td>6. 性能要求较高的场合</td><td>✅ ASan</td><td>Valgrind 开销大，ASan 更适合实战部署前测试</td></tr><tr><td>7. 快速集成进 CI&#x2F;CD</td><td>✅ ASan</td><td>编译期工具更易于集成测试流程</td></tr><tr><td>8. 无法重编译的三方库检测</td><td>✅ Valgrind</td><td>ASan 需重新编译，Valgrind 可直接运行已有二进制</td></tr><tr><td>9. 动态分析研究&#x2F;教学</td><td>✅ Valgrind</td><td>更直观、可观测性强、控制粒度高</td></tr><tr><td>10. 大型 C++ 项目（如游戏、系统工具）</td><td>✅ ASan</td><td>开销小，误报少，更适合持续集成测试</td></tr></tbody></table><h2 id="八、总结"><a href="#八、总结" class="headerlink" title="八、总结"></a>八、总结</h2><ul><li>两者优缺点汇总</li><li>推荐搭配使用的方法（如开发中用 ASan，发布前用 Valgrind 细扫）</li></ul><p>学习资料</p><ul><li><a href="https://valgrind.org/">https://valgrind.org/</a></li><li><a href="https://hardcore.feishu.cn/docx/doxcnXfsINxeICDFXePBelN3p5f">https://hardcore.feishu.cn/docx/doxcnXfsINxeICDFXePBelN3p5f</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gperftools（Google 提供的开源性能优化工具集）</title>
    <link href="/blog/2025/09/17/gperftools%EF%BC%88Google%20%E6%8F%90%E4%BE%9B%E7%9A%84%E5%BC%80%E6%BA%90%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%B7%A5%E5%85%B7%E9%9B%86%EF%BC%89/"/>
    <url>/blog/2025/09/17/gperftools%EF%BC%88Google%20%E6%8F%90%E4%BE%9B%E7%9A%84%E5%BC%80%E6%BA%90%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%B7%A5%E5%85%B7%E9%9B%86%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="gperftools（Google-提供的开源性能优化工具集）"><a href="#gperftools（Google-提供的开源性能优化工具集）" class="headerlink" title="gperftools（Google 提供的开源性能优化工具集）"></a>gperftools（Google 提供的开源性能优化工具集）</h1><h2 id="一、工具概览"><a href="#一、工具概览" class="headerlink" title="一、工具概览"></a>一、工具概览</h2><h3 id="什么是-gperftools？"><a href="#什么是-gperftools？" class="headerlink" title="什么是 gperftools？"></a>什么是 gperftools？</h3><ul><li>gperftools 是 Google 提供的开源性能优化工具集，主要用于性能分析和内存管理。</li><li>包括 <code>tcmalloc</code>（高效的内存分配器）和 <code>cpu profiler</code>（CPU 性能分析器）。</li></ul><h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><ul><li><strong>tcmalloc</strong>：优化的内存分配器，替代标准的 <code>malloc</code>。</li><li><strong>cpu profiler</strong>：通过性能采样记录 <strong>CPU 使用情况</strong>，生成火焰图（flame graph）。</li><li><strong>heap profiler</strong>：分析程序的堆内存使用，检测内存泄漏和过度使用。</li></ul><h2 id="二、安装与配置"><a href="#二、安装与配置" class="headerlink" title="二、安装与配置"></a>二、安装与配置</h2><h3 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a><strong>安装方式</strong></h3><ul><li><p>使用 <code>apt</code>（Ubuntu）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-get install google-perftools libgoogle-perftools-dev<br></code></pre></td></tr></table></figure></li><li><p>使用 <code>brew</code>（macOS）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install gperftools<br></code></pre></td></tr></table></figure></li><li><p>编译源码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/gperftools/gperftools.git<br><span class="hljs-built_in">cd</span> gperftools<br>./configure<br>make<br><span class="hljs-built_in">sudo</span> make install<br></code></pre></td></tr></table></figure></li></ul><h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a><strong>配置环境</strong></h3><ul><li><p>环境变量设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> LD_PRELOAD=/usr/local/lib/libtcmalloc.so<br></code></pre></td></tr></table></figure></li></ul><h2 id="三、常用工具与命令"><a href="#三、常用工具与命令" class="headerlink" title="三、常用工具与命令"></a>三、常用工具与命令</h2><h3 id="1-tcmalloc（内存分配器）"><a href="#1-tcmalloc（内存分配器）" class="headerlink" title="1. tcmalloc（内存分配器）"></a>1. tcmalloc（内存分配器）</h3><ul><li>作用：提高内存分配与释放效率，减少内存碎片。</li><li>使用：<ul><li>在应用中通过设置 <code>LD_PRELOAD</code> 来加载 <code>libtcmalloc</code>。</li><li>用 <code>gperftools</code> 编译的程序会自动使用 <code>tcmalloc</code>，无须修改代码。</li></ul></li></ul><h3 id="2-CPU-Profiler（CPU-性能分析）"><a href="#2-CPU-Profiler（CPU-性能分析）" class="headerlink" title="2. CPU Profiler（CPU 性能分析）"></a>2. CPU Profiler（CPU 性能分析）</h3><h4 id="启用"><a href="#启用" class="headerlink" title="启用"></a>启用</h4><ul><li><p>编译时使用 <code>-lprofiler</code> 链接 profiler 库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># LD_PRELOAD 设置加载libprofiler.so</span><br><span class="hljs-comment"># CPUPROFILE 设置采样文件</span><br><span class="hljs-comment"># CPUPROFILE_FREQUENCY 设置采样频率，默认100</span><br><span class="hljs-comment"># 强行结束不能获得采样文件 CPUPROFILESIGNAL设置采样开关信号，关闭采样只需要killall -12 perftest</span><br>LD_PRELOAD=/usr/local/lib/libprofiler.so CPUPROFILE=data.prof CPUPROFILE_FREQUENCY=555 CPUPROFILESIGNAL=12 ./perftest --benchmark_min_time=10000x <br></code></pre></td></tr></table></figure></li><li><p>在代码中启动&#x2F;停止 profiling：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 精确控制代码采样的区域</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;gperftools/profiler.h&gt;</span></span><br><span class="hljs-built_in">ProfilerStart</span>(<span class="hljs-string">&quot;data.prof&quot;</span>);<br><span class="hljs-comment">// 你的代码</span><br><span class="hljs-built_in">ProfilerStop</span>();<br></code></pre></td></tr></table></figure></li></ul><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><ul><li><p>使用 <code>pprof</code> 或<code>google-pprof</code>工具解析生成的 <code>data.prof</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pprof --text ./your_program data.prof<br></code></pre></td></tr></table></figure><p><img src="https://qnwang.oss-cn-hangzhou.aliyuncs.com/internship/20250429163444540.png" alt="image-20250429163444432"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 每一列含义分析，以红框为例</span><br><span class="hljs-comment"># 函数中的样本数函数中样本百分比当前打印的样本百分比函数以及其调用函数中的样本数量函数以及其调用子函数中的样本百分比函数名</span><br></code></pre></td></tr></table></figure></li><li><p>还可以加入<code>--stackes</code>选项打印调用栈</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pprof --text --stacks ./your_program data.prof<br></code></pre></td></tr></table></figure><p><img src="https://qnwang.oss-cn-hangzhou.aliyuncs.com/internship/20250429164022560.png" alt="image-20250429164022498"></p></li><li><p>发现这样不够直观，可以用<code>--svg</code>生成调用图更加直观</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pprof --svg ./your_program ./data.prof &gt; svgout.svg<br></code></pre></td></tr></table></figure><p><img src="https://qnwang.oss-cn-hangzhou.aliyuncs.com/internship/20250429164316052.png" alt="image-20250429164315976"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 结果分析</span><br><span class="hljs-comment"># 第一行类名</span><br><span class="hljs-comment"># 第二行函数名</span><br><span class="hljs-comment"># 本函数执行执行的时间（直接执行的时间）</span><br><span class="hljs-comment"># 本函数调用函数执行的时间（调用其他函数的时间）</span><br></code></pre></td></tr></table></figure></li><li><p>可以生成火焰图：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pprof --flame ./your_program data.prof<br></code></pre></td></tr></table></figure></li></ul><h3 id="3-Heap-Profiler（堆内存分析）"><a href="#3-Heap-Profiler（堆内存分析）" class="headerlink" title="3. Heap Profiler（堆内存分析）"></a>3. Heap Profiler（堆内存分析）</h3><ul><li><p>启用：</p><ul><li><p>编译时使用 <code>-lprofiler</code>。</p></li><li><p>运行时启用 heap profiler：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;gperftools/heap-profiler.h&gt;</span></span><br><span class="hljs-built_in">HeapProfilerStart</span>(<span class="hljs-string">&quot;heap_profile&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul></li><li><p>分析：</p><ul><li>查看生成的 <code>heap_profile</code> 文件，定位内存泄漏、内存过度分配等问题。</li></ul></li></ul><h3 id="4-Leak-Detector（内存泄漏检测）"><a href="#4-Leak-Detector（内存泄漏检测）" class="headerlink" title="4. Leak Detector（内存泄漏检测）"></a>4. Leak Detector（内存泄漏检测）</h3><ul><li><p>自动检测：当启用 <code>tcmalloc</code> 时，<code>gperftools</code> 自动跟踪内存分配，报告泄漏。</p></li><li><p>例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> HEAPPROFILE=heap_profile<br>./your_program<br></code></pre></td></tr></table></figure></li></ul><h3 id="5-常用命令总结"><a href="#5-常用命令总结" class="headerlink" title="5. 常用命令总结"></a>5. 常用命令总结</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 第一个是用源码编译的，第二个是用apt下载的</span><br>pprof --<span class="hljs-built_in">help</span><br>google-pprof --<span class="hljs-built_in">help</span><br></code></pre></td></tr></table></figure><table><thead><tr><th><strong>Options</strong></th><th><strong>功能 (NAME)</strong></th></tr></thead><tbody><tr><td><code>--cum</code></td><td>按累计数据排序</td></tr><tr><td><code>--base=&lt;base&gt;</code></td><td>在显示前从配置文件中减去 <code>&lt;base&gt;</code></td></tr><tr><td><strong>Reporting Granularity</strong></td><td><strong>报告粒度</strong></td></tr><tr><td><code>--addresses</code></td><td>按地址级别报告</td></tr><tr><td><code>--lines</code></td><td>按源代码行级别报告</td></tr><tr><td><code>--functions</code></td><td>按函数级别报告（默认）</td></tr><tr><td><code>--files</code></td><td>按源代码文件级别报告</td></tr><tr><td><strong>Output Type</strong></td><td><strong>输出类型</strong></td></tr><tr><td><code>--text</code></td><td>生成文本报告（默认）</td></tr><tr><td><code>--gv</code></td><td>生成 Postscript 并显示</td></tr><tr><td><code>--list=&lt;regexp&gt;</code></td><td>生成匹配常规表达式的源代码列表</td></tr><tr><td><code>--disasm=&lt;regexp&gt;</code></td><td>生成匹配常规表达式的指令反汇编代码</td></tr><tr><td><code>--dot</code></td><td>生成 DOT 格式的文件并输出到标准输出</td></tr><tr><td><code>--ps</code></td><td>生成 Postscript 格式文件输出到标准输出</td></tr><tr><td><code>--pdf</code></td><td>生成 PDF 格式文件输出到标准输出</td></tr><tr><td><code>--gif</code></td><td>生成 GIF 格式文件输出到标准输出</td></tr><tr><td><strong>Heap-Profile Options</strong></td><td><strong>堆分析选项</strong></td></tr><tr><td><code>--inuse_space</code></td><td>显示当前使用的内存（以MB为单位，默认）</td></tr><tr><td><code>--inuse_objects</code></td><td>显示当前使用的对象数量</td></tr><tr><td><code>--alloc_space</code></td><td>显示已分配的内存（以MB为单位）</td></tr><tr><td><code>--alloc_objects</code></td><td>显示已分配的对象数量</td></tr><tr><td><code>--show_bytes</code></td><td>显示内存使用量（以字节为单位）</td></tr><tr><td><code>--drop_negative</code></td><td>忽略负值差异</td></tr><tr><td><strong>Call-graph Options</strong></td><td><strong>调用图选项</strong></td></tr><tr><td><code>--nodecount=&lt;n&gt;</code></td><td>显示最多 <code>&lt;n&gt;</code> 个节点（默认80）</td></tr><tr><td><code>--nodefraction=&lt;f&gt;</code></td><td>隐藏占总数小于 <code>&lt;f&gt;</code> 的节点（默认0.005）</td></tr><tr><td><code>--edgefraction=&lt;f&gt;</code></td><td>隐藏占总数小于 <code>&lt;f&gt;</code> 的边（默认0.001）</td></tr><tr><td><code>--focus=&lt;regexp&gt;</code></td><td>只聚焦匹配 <code>&lt;regexp&gt;</code> 的节点</td></tr><tr><td><code>--ignore=&lt;regexp&gt;</code></td><td>忽略匹配 <code>&lt;regexp&gt;</code> 的节点</td></tr><tr><td><code>--scale=&lt;n&gt;</code></td><td>设置 GV 渲染的缩放比例（默认0）</td></tr></tbody></table><h2 id="四、工具集成与调优"><a href="#四、工具集成与调优" class="headerlink" title="四、工具集成与调优"></a>四、工具集成与调优</h2><h3 id="集成与调试"><a href="#集成与调试" class="headerlink" title="集成与调试"></a><strong>集成与调试</strong></h3><ul><li>配合 <strong>perf</strong> 或 <strong>Valgrind</strong> 使用，进行内存、CPU 性能多角度分析。</li><li>与 <strong>gdb</strong> 配合，调试性能问题和内存泄漏。</li></ul><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a><strong>性能优化</strong></h3><ul><li>优化内存使用，减少内存分配开销。</li><li>通过 <code>CPU profiler</code> 定位 CPU 瓶颈函数，优化代码热点。</li><li>使用 <code>Heap Profiler</code> 分析程序内存消耗，减少不必要的内存分配。</li></ul><h2 id="五、工作原理与源码分析"><a href="#五、工作原理与源码分析" class="headerlink" title="五、工作原理与源码分析"></a>五、工作原理与源码分析</h2><h3 id="tcmalloc"><a href="#tcmalloc" class="headerlink" title="tcmalloc"></a>tcmalloc</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>tcmalloc是google开发的一个专门为高并发场景优化的内存分配器，全称为”thread cache malloc”。按照<a href="http://goog-perftools.sourceforge.net/doc/tcmalloc.html">官网</a>的介绍，tcmalloc相比于glibc2.3的malloc(底层实现为ptmalloc2)主要有以下优点：</p><ol><li>快速：一台2.8GHz的P4机器上，执行一次malloc及free大约需要300纳秒;而tcmalloc的版本同样的操作大约只需要50纳秒。</li><li>空间占用小：相比ptmalloc2，tcmalloc对小对象占用空间进行了优化。例如：分配N个8字节对象只需要占用8N<em>1.01字节的空间。即，只需要多使用1%的空间。而ptmalloc2中每个对象都需要使用一个4字节的头信息，最后占用的字节可能达到8N</em>8。</li><li>不容易出现内存暴涨</li></ol><h4 id="替换原理"><a href="#替换原理" class="headerlink" title="替换原理"></a>替换原理</h4><p>glibc中的memory-allocation方法均被为声明为<a href="https://en.wikipedia.org/wiki/Weak_symbol">弱符号</a>，只需要在tcmalloc中将其重新定义即可。 具体的重新定义代码在src&#x2F;libc_override*.h中(不同平台实现不同)，下面是Linux平台下部分memory-allocation函数的重新定义实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span>* <span class="hljs-keyword">operator</span> <span class="hljs-title">new</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span>                  </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">tc_new</span>(size);       &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-keyword">operator</span> <span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-type">void</span>* p)</span> __THROW            </span>&#123; <span class="hljs-built_in">tc_delete</span>(p);              &#125;<br><span class="hljs-type">void</span>* <span class="hljs-keyword">operator</span> <span class="hljs-keyword">new</span>[](<span class="hljs-type">size_t</span> size)                &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">tc_newarray</span>(size);  &#125;<br><span class="hljs-type">void</span> <span class="hljs-keyword">operator</span> <span class="hljs-keyword">delete</span>[](<span class="hljs-type">void</span>* p) __THROW          &#123; <span class="hljs-built_in">tc_deletearray</span>(p);         &#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> &#123;<br>  <span class="hljs-function"><span class="hljs-type">void</span>* <span class="hljs-title">malloc</span><span class="hljs-params">(<span class="hljs-type">size_t</span> s)</span> __THROW                 </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">tc_malloc</span>(s);       &#125;<br>  <span class="hljs-function"><span class="hljs-type">void</span>  <span class="hljs-title">free</span><span class="hljs-params">(<span class="hljs-type">void</span>* p)</span> __THROW                    </span>&#123; <span class="hljs-built_in">tc_free</span>(p);                &#125;<br>  <span class="hljs-function"><span class="hljs-type">void</span>* <span class="hljs-title">realloc</span><span class="hljs-params">(<span class="hljs-type">void</span>* p, <span class="hljs-type">size_t</span> s)</span> __THROW       </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">tc_realloc</span>(p, s);   &#125;<br>  <span class="hljs-function"><span class="hljs-type">void</span>* <span class="hljs-title">calloc</span><span class="hljs-params">(<span class="hljs-type">size_t</span> n, <span class="hljs-type">size_t</span> s)</span> __THROW       </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">tc_calloc</span>(n, s);    &#125;<br>  <span class="hljs-function"><span class="hljs-type">void</span>  <span class="hljs-title">cfree</span><span class="hljs-params">(<span class="hljs-type">void</span>* p)</span> __THROW                   </span>&#123; <span class="hljs-built_in">tc_cfree</span>(p);               &#125;<br>&#125;  <span class="hljs-comment">// extern &quot;C&quot;</span><br></code></pre></td></tr></table></figure><h4 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h4><p><img src="https://qnwang.oss-cn-hangzhou.aliyuncs.com/internship/20250518171450479.png" alt="结构图"></p><p>上图展示了tcmalloc的整体结构, tcmalloc主要由三个组件组成：ThreadCache、CentralFreeList及PageHeap。 其中：</p><ul><li>ThreadCache: 线程缓存，它是一个TSL(线程本地存储)对象，尺寸小于256K的小内存申请均由ThreadCache进行分配；通过ThreadCache分配过程中不需要任何锁，可以极大的提高分配速度</li><li>PageHeap: 中央堆分配器，被所有线程共享(分配时需要全局锁定)，负责与操作系统的直接交互(申请及释放内存)，并且大尺寸的内存申请直接通过PageHeap进行分配</li><li>CentralFreeList：作为PageHeap与ThreadCache的中间人，负责<ol><li>将PageHeap中的内存切分为小块，在恰当时机分配给ThreadCache。</li><li>获取从ThreadCache中回收的内存并在恰当的时机将部分内存归还给PageHeap</li></ol></li></ul><h4 id="核心思想：Segregated-Free-List-离散式空闲列表"><a href="#核心思想：Segregated-Free-List-离散式空闲列表" class="headerlink" title="核心思想：Segregated Free List(离散式空闲列表)"></a>核心思想：Segregated Free List(离散式空闲列表)</h4><p><img src="https://qnwang.oss-cn-hangzhou.aliyuncs.com/internship/20250518171727566.png" alt="结构图"></p><h5 id="小内存分配：ThreadCache"><a href="#小内存分配：ThreadCache" class="headerlink" title="小内存分配：ThreadCache"></a>小内存分配：ThreadCache</h5><p>tcmalloc实现中，每个thread独立维护了各自的离散式空闲列表，它的核心结构如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">FreeList</span> &#123;<br><span class="hljs-keyword">private</span>:<br> <span class="hljs-type">void</span>*    list_;<br> <span class="hljs-type">uint32_t</span> length_;<br> <span class="hljs-type">uint32_t</span> lowater_;<br> <span class="hljs-type">uint32_t</span> max_length_;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadCache</span> &#123;<br><span class="hljs-keyword">private</span>:<br>     FreeList      list_[kNumClasses];    <br>&#125;;<br></code></pre></td></tr></table></figure><pre><code class=" mermaid">flowchart TD    A[请求分配小内存] --&gt; B[通过 SizeMap 获取 size class 和 object size]    B --&gt; C&#123;ThreadCache 中的 free list 是否为空？&#125;    C -- 是 --&gt; D[从 free list 中取出第一个 object 返回]    C -- 否 --&gt; E[从 CentralFreeList 获取若干 object]    E --&gt; F[取出一个 object 返回，剩下的放入 ThreadCache]    E --&gt; G&#123;CentralFreeList 是否也不够？&#125;    G -- 是 --&gt; H[CentralFreeList 向 PageHeap 申请一串页面（Span）]    H --&gt; I[切割页面为多个 object]    I --&gt; J[将部分 object 转移给 ThreadCache]    J --&gt; F    G -- 否 --&gt; F</code></pre><h5 id="大内存分配：PageHeap"><a href="#大内存分配：PageHeap" class="headerlink" title="大内存分配：PageHeap"></a>大内存分配：PageHeap</h5><p>PageHeap的职能之一是向操作系统申请内存，与大多数现代分配器一样，tcmalloc使用基于页的分配方式，即每次至少像系统申请1页空间。tcmalloc中定义的页大小为8K个字节(多数linux系统中一页大小为4K字节，也就是说tcmalloc中的一页对应linux中两页)。 虽然PageHeap是按页申请内存，但是它管理内存的基本单位为Span(跨度)，Span对象代表了表示连续的页面。 如下图所示，分别有a，b，c，d四个Span；a占据了2个页面，b占据了1个页面，c占据了4个页面，d占据了3个页面。</p><p><img src="https://qnwang.oss-cn-hangzhou.aliyuncs.com/internship/20250518172159207.png" alt="结构图"></p><p>下面是Span的定义</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Span</span> &#123;<br>  PageID        start;          <span class="hljs-comment">// Span描述的内存的起始地址</span><br>  Length        length;         <span class="hljs-comment">// Span页面数量</span><br>  Span*         next;           <span class="hljs-comment">// Span由双向链表组成，PageHeap和CentralFreeList中都用的到</span><br>  Span*         prev;           <span class="hljs-comment">//</span><br>  <span class="hljs-type">void</span>*         objects;        <span class="hljs-comment">// Span会在CentralFreeList中拆分成由object组成的free list</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>  refcount : <span class="hljs-number">16</span>;  <span class="hljs-comment">// Span的object被引用次数，当refcount=0时，表示此Span没有被使用</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>  sizeclass : <span class="hljs-number">8</span>;  <span class="hljs-comment">// Span属于的size class</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>  location : <span class="hljs-number">2</span>;   <span class="hljs-comment">// Span在的位置IN_USE？normal？returned？</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>  sample : <span class="hljs-number">1</span>;     <span class="hljs-comment">// Sampled object?</span><br>  <span class="hljs-comment">// What freelist the span is on: IN_USE if on none, or normal or returned</span><br>  <span class="hljs-keyword">enum</span> &#123; IN_USE, ON_NORMAL_FREELIST, ON_RETURNED_FREELIST &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><p>来看下PageHeap的主要结构及示意图：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++">PageMap pagemap_; <span class="hljs-comment">// page id 到 Span的映射</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">SpanList</span> &#123;<br>   Span        normal;<br>   Span        returned;<br>&#125;;<br><br>SpanList large_;<br><br>SpanList free_[kMaxPages]; <span class="hljs-comment">// kMaxPages = 128</span><br></code></pre></td></tr></table></figure><p><img src="https://qnwang.oss-cn-hangzhou.aliyuncs.com/internship/20250518172237981.png" alt="结构图"></p><h5 id="中间人：CentralFreeList"><a href="#中间人：CentralFreeList" class="headerlink" title="中间人：CentralFreeList"></a>中间人：CentralFreeList</h5><p>tcmalloc为每个size class设置设置了一个CentralFreeList(中央自由列表)，ThreadCache之间共享这些CentralFreeList</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">static</span> CentralFreeListPadded central_cache_[kNumClasses];<br> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CentralFreeList</span> &#123;<br> <span class="hljs-keyword">private</span>:<br>     SpinLock lock_;<br>     <span class="hljs-type">size_t</span> size_class_;<br>     Span empty_;       <br>     Span nonempty_;<br> &#125;;<br></code></pre></td></tr></table></figure><p>作为中间人，CentralFreeList的功能之一就是从PageHeap中取出部分Span并按照预定大小(SizeMap中定义)将其拆分成大小固定的object供ThreadCache共享；</p><pre><code class=" mermaid">flowchart TD  A[从 PageHeap 获取 Span] --&gt; B[RegisterSizeClass&lt;br/&gt;设置location和sizeclass]  B --&gt; C[Span 切分为 objects&lt;br/&gt;挂到 Span::objects 链表]  C --&gt; D[挂到 CentralFreeList::nonempty_]  E[ThreadCache 请求 object] --&gt; F[从 nonempty_ Span 取 object]  F --&gt; G[refcount += 1]  F --&gt;|Span 空| H[从 nonempty_ 移除&lt;br/&gt;挂到 empty_]  I[ThreadCache 归还 object] --&gt; J[添加 object 到 Span::objects]  J --&gt; K[refcount -= 1]  K --&gt;|refcount == 0| L[&quot;从链表移除&lt;br/&gt;PageHeap::Delete(Span)&quot;]  K --&gt;|Span 在 empty_| M[挂回 nonempty_]</code></pre><pre><code class=" mermaid">sequenceDiagram  participant CentralFreeList  participant PageHeap  participant Span  participant ThreadCache  Note over CentralFreeList: 从 PageHeap 获取 Span  CentralFreeList-&gt;&gt;PageHeap: Request Span  PageHeap--&gt;&gt;CentralFreeList: Return Span  CentralFreeList-&gt;&gt;Span: RegisterSizeClass (location=IN_USE, sizeclass=X)  CentralFreeList-&gt;&gt;Span: Split Span into objects (free list)  CentralFreeList-&gt;&gt;CentralFreeList: Add Span to nonempty_ list  Note over ThreadCache: 从 CentralFreeList 分配 object  ThreadCache-&gt;&gt;CentralFreeList: Request object  CentralFreeList-&gt;&gt;Span: Get object from free list  Span-&gt;&gt;Span: refcount++  alt No object left in Span    CentralFreeList-&gt;&gt;CentralFreeList: Move Span to empty_ list  end  Note over ThreadCache: 归还 object 给 CentralFreeList  ThreadCache-&gt;&gt;CentralFreeList: Return object  CentralFreeList-&gt;&gt;Span: Add object back to free list  Span-&gt;&gt;Span: refcount--  alt refcount == 0    CentralFreeList-&gt;&gt;CentralFreeList: Remove Span from list    CentralFreeList-&gt;&gt;PageHeap: Delete(Span)  else Span in empty_    CentralFreeList-&gt;&gt;CentralFreeList: Move Span to nonempty_ list  end</code></pre><h3 id="cpu-profiler"><a href="#cpu-profiler" class="headerlink" title="cpu profiler"></a>cpu profiler</h3><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><p>这是最初由 Google 开发的 CPU 分析器。使用方法分为三个部分：将库链接到应用程序、运行代码以及分析输出。</p><h4 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h4><pre><code class=" mermaid">flowchart TD    Start([程序开始运行])    InitProfiler[初始化 Profiler&lt;br&gt;（ProfilerStart）]    SetupSignal[设置定时器&lt;br&gt;定期触发 SIGPROF 信号]    InstallHandler[安装 SIGPROF 的信号处理器&lt;br&gt;（ProfilerSignalHandler）]    Wait[程序继续运行，等待采样时刻]    OnSignal[定时器触发 SIGPROF 信号]    GetPC[信号处理器中获取当前函数调用地址&lt;br&gt;使用 backtrace 等方法]    RecordSample[记录当前调用栈&lt;br&gt;写入 profile 数据结构]    WriteToFile[周期性写入 profile 数据文件]    StopProfiler[ProfilerStop 停止分析，关闭文件]    End([程序结束运行])    Start --&gt; InitProfiler --&gt; SetupSignal --&gt; InstallHandler --&gt; Wait    Wait --&gt; OnSignal --&gt; GetPC --&gt; RecordSample --&gt; Wait    RecordSample --&gt; WriteToFile --&gt; Wait    Wait --&gt; StopProfiler --&gt; End  classDef important fill:#fff3e0,stroke:#ff9800,stroke-width:2px;</code></pre><h4 id="关键源码"><a href="#关键源码" class="headerlink" title="关键源码"></a>关键源码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 启动 CPU Profiler，采样逻辑主入口</span><br><span class="hljs-keyword">extern</span> “C” <span class="hljs-function">PERFTOOLS_DLL_DECL <span class="hljs-type">int</span> <span class="hljs-title">ProfilerStart</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* fname)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> CpuProfiler::instance_.<span class="hljs-built_in">Start</span>(fname, <span class="hljs-literal">NULL</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">CpuProfiler::Start</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* fname, <span class="hljs-type">const</span> ProfilerOptions* options)</span> </span>&#123;<br>    collector_.<span class="hljs-built_in">Start</span>(fname, collector_options);<br>    <span class="hljs-comment">// Setup handler for SIGPROF interrupts</span><br>    <span class="hljs-built_in">EnableHandler</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-comment">// 初始化数据收集需要的数据结构</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">ProfileData::Start</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* fname, <span class="hljs-type">const</span> ProfileData::Options&amp; options)</span> </span>&#123;<br> <br>    <span class="hljs-comment">// Open output file and initialize various data structures</span><br>    <span class="hljs-type">int</span> fd =<span class="hljs-built_in">open</span>(fname, O_CREAT | O_WRONLY | O_TRUNC, <span class="hljs-number">0666</span>);<br>    start_time_ = <span class="hljs-built_in">time</span>(<span class="hljs-literal">NULL</span>);<br>    fname_ = <span class="hljs-built_in">strdup</span>(fname);<br> <br>    <span class="hljs-comment">// Reset counters</span><br>    num_evicted_ = <span class="hljs-number">0</span>;<br>    count_ = <span class="hljs-number">0</span>;<br>    evictions_ = <span class="hljs-number">0</span>;<br>    total_bytes_ = <span class="hljs-number">0</span>;<br> <br>    hash_ = <span class="hljs-keyword">new</span> Bucket[kBuckets];<br>    evict_ = <span class="hljs-keyword">new</span> Slot[kBufferLength];<br>    <span class="hljs-built_in">memset</span>(hash_, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(hash_[<span class="hljs-number">0</span>]) * kBuckets);<br> <br>    <span class="hljs-comment">// Record special entries</span><br>    evict_[num_evicted_++] = <span class="hljs-number">0</span>; <span class="hljs-comment">// count for header</span><br>    evict_[num_evicted_++] = <span class="hljs-number">3</span>; <span class="hljs-comment">// depth for header</span><br>    evict_[num_evicted_++] = <span class="hljs-number">0</span>; <span class="hljs-comment">// Version number</span><br>    <span class="hljs-built_in">CHECK_NE</span>(<span class="hljs-number">0</span>, options.<span class="hljs-built_in">frequency</span>());<br>    <span class="hljs-type">int</span> period =<span class="hljs-number">1000000</span>/ options.<span class="hljs-built_in">frequency</span>();<br>    evict_[num_evicted_++] = period; <span class="hljs-comment">// Period (microseconds)</span><br>    evict_[num_evicted_++] = <span class="hljs-number">0</span>; <span class="hljs-comment">// Padding</span><br>    out_ = fd;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 把prof_handler这个函数注册到了某个地方</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CpuProfiler::EnableHandler</span><span class="hljs-params">()</span> </span>&#123;<br>    prof_handler_token_ = <span class="hljs-built_in">ProfileHandlerRegisterCallback</span>(prof_handler, <span class="hljs-keyword">this</span>);<br>&#125;<br><span class="hljs-function">ProfileHandlerToken* <span class="hljs-title">ProfileHandlerRegisterCallback</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    ProfileHandlerCallback callback, <span class="hljs-type">void</span>* callback_arg)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> ProfileHandler::<span class="hljs-built_in">Instance</span>()-&gt;<span class="hljs-built_in">RegisterCallback</span>(callback, callback_arg);<br>&#125;<br><span class="hljs-comment">// 根据环境变量CPUPROFILE_REALTIME的配置，来决定让SIGPROF还是SIGALRM信号来触发SignalHandler信号处理函数，并根据环境变量CPUPROFILE_FREQUENCY的配置来设置自己的一个频率变量 frequency_</span><br>ProfileHandler::<span class="hljs-built_in">ProfileHandler</span>() &#123;<br> <br>    timer_type_ = (<span class="hljs-built_in">getenv</span>(“CPUPROFILE_REALTIME”) ? ITIMER_REAL : ITIMER_PROF);<br>    signal_number_ = (timer_type_ == ITIMER_PROF ? SIGPROF : SIGALRM);<br> <br>    <span class="hljs-comment">// Get frequency of interrupts (if specified)</span><br>    <span class="hljs-type">char</span> junk;<br>    constchar* fr =<span class="hljs-built_in">getenv</span>(“CPUPROFILE_FREQUENCY”);<br> <br>    <span class="hljs-keyword">if</span> (fr != <span class="hljs-literal">NULL</span> &amp;&amp; (<span class="hljs-built_in">sscanf</span>(fr, <span class="hljs-string">&quot;%u%c&quot;</span>, &amp;frequency_, &amp;junk) == <span class="hljs-number">1</span>) &amp;&amp; (frequency_ &gt; <span class="hljs-number">0</span>)) &#123;<br>        <span class="hljs-comment">// Limit to kMaxFrequency</span><br>        frequency_ = (frequency_ &gt; kMaxFrequency) ? kMaxFrequency : frequency_;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        frequency_ = kDefaultFrequency;<br>    &#125;<br> <br>    <span class="hljs-comment">// Install the signal handler.</span><br>    structsigaction sa;<br>    sa.sa_sigaction = SignalHandler;<br>    sa.sa_flags = SA_RESTART | SA_SIGINFO;<br>    <span class="hljs-built_in">sigemptyset</span>(&amp;sa.sa_mask);<br>    <span class="hljs-built_in">sigaction</span>(signal_number_, &amp;sa, <span class="hljs-literal">NULL</span>);<br>&#125;<br><span class="hljs-comment">// 加入第一个callback的时候调用StartTimer（）函数来启动定时器，然后调用EnableHander函数来开启回调</span><br><span class="hljs-function">ProfileHandlerToken* <span class="hljs-title">ProfileHandler::RegisterCallback</span><span class="hljs-params">(ProfileHandlerCallback callback, <span class="hljs-type">void</span>* callback_arg)</span> </span>&#123;<br> <br>    ProfileHandlerToken* token = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ProfileHandlerToken</span>(callback, callback_arg);<br>    <span class="hljs-function">SpinLockHolder <span class="hljs-title">cl</span><span class="hljs-params">(&amp;control_lock_)</span></span>;<br>    <span class="hljs-built_in">DisableHandler</span>();<br>    &#123;<br>        <span class="hljs-function">SpinLockHolder <span class="hljs-title">sl</span><span class="hljs-params">(&amp;signal_lock_)</span></span>;<br>        callbacks_.<span class="hljs-built_in">push_back</span>(token);<br>    &#125;<br> <br>    <span class="hljs-comment">// Start the timer if timer is shared and this is a first callback.</span><br>    <span class="hljs-keyword">if</span> ((callback_count_ == <span class="hljs-number">0</span>) &amp;&amp; (timer_sharing_ == TIMERS_SHARED)) &#123;<br>        <span class="hljs-built_in">StartTimer</span>();<br>    &#125;<br>    ++callback_count_;<br>    <span class="hljs-built_in">EnableHandler</span>();<br>    <span class="hljs-keyword">return</span> token;<br>&#125;<br><span class="hljs-comment">// </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ProfileHandler::StartTimer</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">itimerval</span> timer;<br>    timer.it_interval.tv_sec = <span class="hljs-number">0</span>;<br>    timer.it_interval.tv_usec = <span class="hljs-number">1000000</span> / frequency_;<br>    timer.it_value = timer.it_interval;<br>    <span class="hljs-built_in">setitimer</span>(timer_type_, &amp;timer, <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-comment">//</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ProfileHandler::EnableHandler</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sigaction</span> sa;<br>    sa.sa_sigaction = SignalHandler;<br>    sa.sa_flags = SA_RESTART | SA_SIGINFO;<br>    <span class="hljs-built_in">sigemptyset</span>(&amp;sa.sa_mask);<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> signal_number = (timer_type_ == ITIMER_PROF ? SIGPROF : SIGALRM);<br>    <span class="hljs-built_in">RAW_CHECK</span>(<span class="hljs-built_in">sigaction</span>(signal_number, &amp;sa, <span class="hljs-literal">NULL</span>) == <span class="hljs-number">0</span>, <span class="hljs-string">&quot;sigprof (enable)&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="heap-profiler"><a href="#heap-profiler" class="headerlink" title="heap profiler"></a>heap profiler</h3><h4 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h4><p>Heap Profiling 通常指对应用程序的堆分配进行收集或采样，来向我们报告程序的内存使用情况，以便分析内存占用原因或定位内存泄漏根源。</p><h4 id="工作流程-1"><a href="#工作流程-1" class="headerlink" title="工作流程"></a>工作流程</h4><p><strong>Heap Profile 的 stack trace + statistics 数据模型与 CPU Proflie 是一致的</strong>。</p><pre><code class=" mermaid">flowchart TD    A[&quot;HeapProfilerStart()&quot;] --&gt; B[初始化采样参数与文件输出路径]    B --&gt; C[注册 malloc/free hook]    C --&gt; D[用户程序 malloc]    D --&gt; E&#123;是否触发采样?&#125;:::important    E -- 否 --&gt; F[正常 malloc]    E -- 是 --&gt; G[记录采样信息]        G --&gt; H[获取调用栈 stacktrace]    H --&gt; I[记录 size + stacktrace 到 ProfileTable]    I --&gt; J[继续 malloc 执行]        J --&gt; K[用户程序运行中多次采样]    K --&gt; L[&quot;HeapProfilerDump() 或 Stop()&quot;]    L --&gt; M[导出 .heap 文件]    M --&gt; N[使用 pprof 工具进行分析]classDef important fill:#fff3e0,stroke:#ff9800,stroke-width:2px;</code></pre><h4 id="关键源码-1"><a href="#关键源码-1" class="headerlink" title="关键源码"></a>关键源码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 启动入口</span><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HeapProfilerStart</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* prefix)</span> </span>&#123;<br>  (<span class="hljs-type">void</span>)tcmalloc::<span class="hljs-built_in">GetProgramInvocationName</span>();<br>  <span class="hljs-function">SpinLockHolder <span class="hljs-title">l</span><span class="hljs-params">(&amp;heap_lock)</span></span>;<br>  <span class="hljs-keyword">if</span> (is_on) <span class="hljs-keyword">return</span>;<br>  is_on = <span class="hljs-literal">true</span>;<br>  <span class="hljs-built_in">RAW_VLOG</span>(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;Starting tracking the heap&quot;</span>);<br>    <br>  MallocExtension::<span class="hljs-built_in">Initialize</span>();<br>  heap_profiler_memory = LowLevelAlloc::<span class="hljs-built_in">NewArena</span>();<br>  heap_profile = <span class="hljs-built_in">new</span>(<span class="hljs-built_in">ProfilerMalloc</span>(<span class="hljs-built_in">sizeof</span>(HeapProfileTable)))<br>      <span class="hljs-built_in">HeapProfileTable</span>(ProfilerMalloc, ProfilerFree);<br><br>  last_dump_alloc = <span class="hljs-number">0</span>;<br>  last_dump_free = <span class="hljs-number">0</span>;<br>  high_water_mark = <span class="hljs-number">0</span>;<br>  last_dump_time = <span class="hljs-number">0</span>;<br>    <br>  <span class="hljs-comment">// Now set the hooks that capture new/delete and malloc/free.</span><br>  <span class="hljs-built_in">RAW_CHECK</span>(MallocHook::<span class="hljs-built_in">AddNewHook</span>(&amp;NewHook), <span class="hljs-string">&quot;&quot;</span>);<br>  <span class="hljs-built_in">RAW_CHECK</span>(MallocHook::<span class="hljs-built_in">AddDeleteHook</span>(&amp;DeleteHook), <span class="hljs-string">&quot;&quot;</span>);<br>  ……<br>&#125;<br><span class="hljs-comment">// tcmalloc 在 malloc() 和 operator new 中增加了一些采样逻辑，当根据条件触发采样 hook 时，会执行以下函数</span><br><span class="hljs-comment">// Record an allocation in the profile.</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">RecordAlloc</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* ptr, <span class="hljs-type">size_t</span> bytes, <span class="hljs-type">int</span> skip_count)</span> </span>&#123;<br>  <span class="hljs-comment">// Take the stack trace outside the critical section.</span><br><span class="hljs-type">void</span>* stack[HeapProfileTable::kMaxStackDepth];<br>  <span class="hljs-type">int</span> depth = HeapProfileTable::<span class="hljs-built_in">GetCallerStackTrace</span>(skip_count + <span class="hljs-number">1</span>, stack);<br>  <span class="hljs-function">SpinLockHolder <span class="hljs-title">l</span><span class="hljs-params">(&amp;heap_lock)</span></span>;<br>  <span class="hljs-keyword">if</span> (is_on) &#123;<br>    heap_profile-&gt;<span class="hljs-built_in">RecordAlloc</span>(ptr, bytes, depth, stack);<br>    <span class="hljs-built_in">MaybeDumpProfileLocked</span>();<br>  &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HeapProfileTable::RecordAlloc</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-type">const</span> <span class="hljs-type">void</span>* ptr, <span class="hljs-type">size_t</span> bytes, <span class="hljs-type">int</span> stack_depth,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-type">const</span> <span class="hljs-type">void</span>* <span class="hljs-type">const</span> call_stack[])</span> </span>&#123;<br>  Bucket* b = <span class="hljs-built_in">GetBucket</span>(stack_depth, call_stack);<br>  b-&gt;allocs++;<br>  b-&gt;alloc_size += bytes;<br>  total_.allocs++;<br>  total_.alloc_size += bytes;<br>  AllocValue v;<br>  v.<span class="hljs-built_in">set_bucket</span>(b);  <span class="hljs-comment">// also did set_live(false); set_ignore(false)</span><br>  v.bytes = bytes;<br>  address_map_-&gt;<span class="hljs-built_in">Insert</span>(ptr, v);<br>&#125;<br><span class="hljs-comment">// 在 free() 或 operator delete 中同样需要增加一些逻辑来记录内存释放情况</span><br><span class="hljs-comment">// Record a deallocation in the profile.</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">RecordFree</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* ptr)</span> </span>&#123;<br>  <span class="hljs-function">SpinLockHolder <span class="hljs-title">l</span><span class="hljs-params">(&amp;heap_lock)</span></span>;<br>  <span class="hljs-keyword">if</span> (is_on) &#123;<br>    heap_profile-&gt;<span class="hljs-built_in">RecordFree</span>(ptr);<br>    <span class="hljs-built_in">MaybeDumpProfileLocked</span>();<br>  &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HeapProfileTable::RecordFree</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* ptr)</span> </span>&#123;<br>  AllocValue v;<br>  <span class="hljs-keyword">if</span> (address_map_-&gt;<span class="hljs-built_in">FindAndRemove</span>(ptr, &amp;v)) &#123;<br>    Bucket* b = v.<span class="hljs-built_in">bucket</span>();<br>    b-&gt;frees++;<br>    b-&gt;free_size += v.bytes;<br>    total_.frees++;<br>    total_.free_size += v.bytes;<br>  &#125;<br>&#125;<br><span class="hljs-comment">// 调用 GetCallerStackTrace() 获取调用栈。</span><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">MallocHook_GetCallerStackTrace</span><span class="hljs-params">(<span class="hljs-type">void</span>** result, <span class="hljs-type">int</span> max_depth,</span></span><br><span class="hljs-params"><span class="hljs-function">                                              <span class="hljs-type">int</span> skip_count)</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(NO_TCMALLOC_SAMPLES)</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>  <span class="hljs-keyword">if</span> (max_depth &lt; <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-type">int</span> retval = tcmalloc::<span class="hljs-built_in">GrabBacktrace</span>(result, max_depth, skip_count);<br>  <span class="hljs-comment">// prevent tail-call above</span><br>  *(<span class="hljs-type">void</span>* <span class="hljs-keyword">volatile</span> *)result;<br>  <span class="hljs-keyword">return</span> retval;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br><span class="hljs-comment">// </span><br></code></pre></td></tr></table></figure><h2 id="六、实战案例与分析"><a href="#六、实战案例与分析" class="headerlink" title="六、实战案例与分析"></a>六、实战案例与分析</h2><h3 id="案例-1：使用-tcmalloc-优化内存"><a href="#案例-1：使用-tcmalloc-优化内存" class="headerlink" title="案例 1：使用 tcmalloc 优化内存"></a><strong>案例 1：使用 tcmalloc 优化内存</strong></h3><ul><li>比较 <code>malloc</code> 和 <code>tcmalloc</code> 在高频次分配下的性能差异。</li><li>分析内存碎片、内存占用的变化。</li></ul><h3 id="案例-2：使用-CPU-Profiler-分析热点"><a href="#案例-2：使用-CPU-Profiler-分析热点" class="headerlink" title="案例 2：使用 CPU Profiler 分析热点"></a><strong>案例 2：使用 CPU Profiler 分析热点</strong></h3><ul><li>编写一个包含复杂运算的程序，用 <code>CPU Profiler</code> 查找 CPU 使用的瓶颈函数。</li><li>使用火焰图进行可视化分析，优化计算热点。</li></ul><h3 id="案例-3：内存泄漏定位与修复"><a href="#案例-3：内存泄漏定位与修复" class="headerlink" title="案例 3：内存泄漏定位与修复"></a><strong>案例 3：内存泄漏定位与修复</strong></h3><ul><li>故意写一个内存泄漏示例，使用 <code>Heap Profiler</code> 进行检测，定位泄漏源并修复。</li></ul><h2 id="七、常见问题与坑"><a href="#七、常见问题与坑" class="headerlink" title="七、常见问题与坑"></a>七、常见问题与坑</h2><ul><li><strong>性能开销</strong>：启用 <code>gperftools</code> 后会带来一定的性能开销，尤其是在高负载时。要注意选择合适的 profiling 级别。</li><li><strong>与其他库的兼容性</strong>：某些情况下，<code>tcmalloc</code> 与第三方库的内存分配可能会发生冲突，需要根据具体情况选择关闭。</li><li><strong>内存泄漏的误报</strong>：<code>Heap Profiler</code> 有时会报告不准确的内存泄漏，需要结合代码逐步排查。</li></ul><h2 id="八、总结与心得"><a href="#八、总结与心得" class="headerlink" title="八、总结与心得"></a>八、总结与心得</h2><ul><li><strong>优点</strong>：<ul><li>高效的内存管理，适合高性能应用。</li><li>支持详细的性能分析，帮助定位 CPU 和内存瓶颈。</li></ul></li><li><strong>缺点</strong>：<ul><li>使用时有性能开销，建议仅在开发和调试阶段启用。</li><li>配置较为复杂，需要一定的学习曲线。</li></ul></li><li><strong>实用性</strong>：<ul><li>在高性能要求的 C++ 项目中使用 <code>gperftools</code>，可以大幅提升内存管理效率和 CPU 性能。</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>性能分析工具对比分析（开源 vs 商业）</title>
    <link href="/blog/2025/09/17/tools_comparison/"/>
    <url>/blog/2025/09/17/tools_comparison/</url>
    
    <content type="html"><![CDATA[<h1 id="性能分析工具对比分析（开源-vs-商业）"><a href="#性能分析工具对比分析（开源-vs-商业）" class="headerlink" title="性能分析工具对比分析（开源 vs 商业）"></a>性能分析工具对比分析（开源 vs 商业）</h1><h2 id="一、概览"><a href="#一、概览" class="headerlink" title="一、概览"></a>一、概览</h2><p>本篇文档总结了常见开源性能分析工具（perf、valgrind、asan、gperftools）与主流闭源商业工具（Intel VTune Profiler、Dynatrace、New Relic）的功能特性、实现方式、适用场景及优劣势，为后续工具选型和实验设计提供依据。</p><h2 id="二、工具清单"><a href="#二、工具清单" class="headerlink" title="二、工具清单"></a>二、工具清单</h2><table><thead><tr><th>类型</th><th>工具名称</th><th>简介</th></tr></thead><tbody><tr><td>开源</td><td>perf</td><td>Linux 原生性能采样工具</td></tr><tr><td>开源</td><td>valgrind</td><td>二进制插桩分析，擅长内存错误检测</td></tr><tr><td>开源</td><td>AddressSanitizer (ASan)</td><td>编译期插桩，检测野指针&#x2F;溢出等问题</td></tr><tr><td>开源</td><td>gperftools</td><td>Google 开源的采样 profiler 工具</td></tr><tr><td>商业闭源</td><td>Intel VTune Profiler</td><td>Intel 提供的硬件级性能分析平台</td></tr><tr><td>商业闭源</td><td>Dynatrace</td><td>全栈性能监控平台，支持 APM</td></tr><tr><td>商业闭源</td><td>New Relic</td><td>云原生监控，强调仪表盘与可观测性</td></tr></tbody></table><h2 id="三、实现原理对比"><a href="#三、实现原理对比" class="headerlink" title="三、实现原理对比"></a>三、实现原理对比</h2><table><thead><tr><th>工具</th><th>实现方式</th><th>特点</th></tr></thead><tbody><tr><td>perf</td><td>基于内核 <code>perf_event_open</code> 系统调用</td><td>低开销、依赖内核事件与 PMU 支持</td></tr><tr><td>valgrind</td><td>二进制插桩 + shadow memory</td><td>无需源码，检测细致，开销大</td></tr><tr><td>ASan</td><td>编译期插桩 + shadow memory</td><td>精度高，速度快于 valgrind，需源码 &amp; 重编译</td></tr><tr><td>gperftools</td><td>函数 hook + 采样调用栈</td><td>适合生产环境调优，精度受限于采样频率</td></tr><tr><td>VTune</td><td>硬件 PMU + 内核采样 + GUI</td><td>精度高，支持内存、缓存、线程粒度分析</td></tr><tr><td>Dynatrace</td><td>Agent 插桩 + 远程分析平台</td><td>云监控为主，适合大规模微服务监控</td></tr><tr><td>New Relic</td><td>Agent SDK + Web 仪表盘</td><td>云原生集成好，聚焦应用层行为、指标、日志等</td></tr></tbody></table><h2 id="四、使用场景对比"><a href="#四、使用场景对比" class="headerlink" title="四、使用场景对比"></a>四、使用场景对比</h2><table><thead><tr><th>场景</th><th>推荐工具</th><th>原因</th></tr></thead><tbody><tr><td>内存泄漏与野指针分析</td><td>valgrind、asan</td><td>静态插桩，检测能力强</td></tr><tr><td>CPU hotspot 分析</td><td>perf、gperftools、VTune</td><td>支持采样、函数调用统计</td></tr><tr><td>多线程竞争分析</td><td>Helgrind（valgrind 子工具）、VTune</td><td>支持数据竞争检测</td></tr><tr><td>生产环境开销敏感场景</td><td>gperftools、VTune</td><td>低侵入性采样</td></tr><tr><td>云平台系统监控</td><td>Dynatrace、New Relic</td><td>云原生支持强，可视化强大</td></tr><tr><td>精细缓存与分支分析</td><td>VTune</td><td>支持 L1&#x2F;L2 命中率、指令流水线分析等</td></tr></tbody></table><h2 id="五、功能对比汇总表"><a href="#五、功能对比汇总表" class="headerlink" title="五、功能对比汇总表"></a>五、功能对比汇总表</h2><table><thead><tr><th>工具</th><th>CPU 采样</th><th>内存泄漏检测</th><th>线程竞争</th><th>云平台支持</th><th>实时分析</th><th>插桩方式</th><th>是否需源码</th></tr></thead><tbody><tr><td>perf</td><td>✅</td><td>❌</td><td>❌</td><td>❌</td><td>✅</td><td>系统调用采样</td><td>否</td></tr><tr><td>valgrind</td><td>❌</td><td>✅</td><td>✅</td><td>❌</td><td>❌</td><td>动态插桩</td><td>否</td></tr><tr><td>asan</td><td>❌</td><td>✅</td><td>❌</td><td>❌</td><td>❌</td><td>编译期插桩</td><td>是</td></tr><tr><td>gperftools</td><td>✅</td><td>✅（部分）</td><td>❌</td><td>❌</td><td>✅</td><td>采样 hook</td><td>否</td></tr><tr><td>VTune</td><td>✅</td><td>✅</td><td>✅</td><td>部分</td><td>✅</td><td>多方式结合</td><td>否</td></tr><tr><td>Dynatrace</td><td>❌</td><td>❌</td><td>❌</td><td>✅</td><td>✅</td><td>Agent 插桩</td><td>否</td></tr><tr><td>New Relic</td><td>❌</td><td>❌</td><td>❌</td><td>✅</td><td>✅</td><td>Agent 插桩</td><td>否</td></tr></tbody></table><h2 id="六、优缺点总结"><a href="#六、优缺点总结" class="headerlink" title="六、优缺点总结"></a>六、优缺点总结</h2><h3 id="开源工具"><a href="#开源工具" class="headerlink" title="开源工具"></a>开源工具</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>免费开源、易于定制</li><li>原理透明，适合研究与教学</li><li>局部问题定位能力强</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>不适用于大规模系统统一监控</li><li>可视化较弱，使用门槛高</li><li>多工具组合使用复杂度大</li></ul><h3 id="商业工具"><a href="#商业工具" class="headerlink" title="商业工具"></a>商业工具</h3><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ul><li>自动化程度高，GUI 友好</li><li>可观测性强，适合运维&#x2F;业务团队</li><li>一体化监控链路（APM + 系统 + 网络）</li></ul><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ul><li>成本高、闭源不可定制</li><li>有些只适合云平台 &#x2F; 现代架构</li><li>核心分析精度或能力受限</li></ul><h2 id="七、总结与建议"><a href="#七、总结与建议" class="headerlink" title="七、总结与建议"></a>七、总结与建议</h2><ul><li><strong>开发调优场景</strong>：优先使用 <code>perf</code>、<code>gperftools</code>、<code>asan</code> 等开源工具，深入定位代码瓶颈。</li><li><strong>内存问题排查</strong>：推荐使用 <code>asan</code> 或 <code>valgrind</code>，结合编译期插桩与动态检测。</li><li><strong>生产环境监控</strong>：如需云平台可观测性，推荐使用 Dynatrace 或 New Relic。</li><li><strong>精细硬件分析</strong>：涉及缓存、线程粒度优化可考虑 Intel VTune。</li></ul>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/blog/2025/09/17/hello-world/"/>
    <url>/blog/2025/09/17/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>perf学习笔记</title>
    <link href="/blog/2025/09/17/perf%EF%BC%88Linux%20%E4%B8%8B%E7%9A%84%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%99%A8%EF%BC%89/"/>
    <url>/blog/2025/09/17/perf%EF%BC%88Linux%20%E4%B8%8B%E7%9A%84%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%99%A8%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="perf学习笔记"><a href="#perf学习笔记" class="headerlink" title="perf学习笔记"></a>perf学习笔记</h1><h2 id="1-工具概览"><a href="#1-工具概览" class="headerlink" title="1. 工具概览"></a>1. 工具概览</h2><h3 id="1-1-perf是什么？"><a href="#1-1-perf是什么？" class="headerlink" title="1.1 perf是什么？"></a>1.1 perf是什么？</h3><p>perf：使用性能计数器进行 Linux 分析（Tracing Frameworks），perf也称为perf_events，perf 功能强大：它可以检测 CPU 性能计数器、跟踪点、kprobe 和 uprobe（动态跟踪）。它还能够进行轻量级性能分析，它包含在 Linux 内核的 tools&#x2F;perf 下。</p><ul><li>性能计数器是 CPU 硬件寄存器，用于计数硬件事件，例如执行的指令、遭受的缓存未命中或错误预测的分支。</li><li>跟踪点是放置在代码中逻辑位置的检测点，例如系统调用、TCP&#x2F;IP 事件、文件系统操作等。（Event Sources静态探针）</li><li>perf 还可以使用 kprobes 和 uprobes 框架动态创建跟踪点（类似于内核驱动，可以热插拔），用于内核和用户空间的动态跟踪。（Event Sources动态探针）</li></ul><h3 id="1-2-perf-解决什么问题？"><a href="#1-2-perf-解决什么问题？" class="headerlink" title="1.2 perf 解决什么问题？"></a>1.2 perf 解决什么问题？</h3><ul><li>可消费事件源：tracepoints，kprobes，uprobes，硬件计数器</li><li>比ftrace更安全</li><li>不能做函数遍历</li></ul><h3 id="1-3-使用场景举例"><a href="#1-3-使用场景举例" class="headerlink" title="1.3 使用场景举例"></a>1.3 使用场景举例</h3><p>用来调试程序和相关信息，具体场景如下：</p><ol><li>寻找热点函数，定位性能瓶颈（通过采样）</li><li>用来分析CPU cache、CPU迁移、分支预测、指令周期等各种硬件事件</li><li>对感兴趣的事件进行动态追踪</li></ol><p>学习材料：</p><ul><li>Brendan Gregg 的文章（经典入门）：Linux perf Examples</li><li>中文推荐：阮一峰《Linux perf 工具入门教程》</li></ul><h2 id="2-安装与环境配置"><a href="#2-安装与环境配置" class="headerlink" title="2. 安装与环境配置"></a>2. 安装与环境配置</h2><h3 id="2-1-安装方法（apt-yum-brew等）"><a href="#2-1-安装方法（apt-yum-brew等）" class="headerlink" title="2.1 安装方法（apt&#x2F;yum&#x2F;brew等）"></a>2.1 安装方法（apt&#x2F;yum&#x2F;brew等）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#  相关库</span><br>apt install linux-tools-common<br>apt-get install linux-toools-5.4.0-107-generic<br></code></pre></td></tr></table></figure><h3 id="2-2-编译配置参数"><a href="#2-2-编译配置参数" class="headerlink" title="2.2 编译配置参数"></a>2.2 编译配置参数</h3><h3 id="2-3-常见问题及解决"><a href="#2-3-常见问题及解决" class="headerlink" title="2.3 常见问题及解决"></a>2.3 常见问题及解决</h3><h2 id="3-基本用法"><a href="#3-基本用法" class="headerlink" title="3. 基本用法"></a>3. 基本用法</h2><h3 id="3-1-常用命令汇总"><a href="#3-1-常用命令汇总" class="headerlink" title="3.1 常用命令汇总"></a>3.1 常用命令汇总</h3><table><thead><tr><th>命令</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td>man perf</td><td>使用说明</td><td></td></tr><tr><td>perf -h</td><td>help</td><td></td></tr><tr><td>perf list</td><td>列出所有能够触发perf采样点的事件列出所有能够触发perf采样点的事件，类似&#x2F;sys&#x2F;kernel&#x2F;debug&#x2F;tracing&#x2F;available_events的输出<br/>实测发现，perf 支持的事件要比ftrace多一 倍左右。</td><td>eg：$ perf list | grep receive<em>skb net:netif</em>receive<em>skb</em> <em>[Tracepoint event] net:netif</em>receive<em>skb</em>entry [Tracepoint event]</td></tr><tr><td>perf probe</td><td>定义新的动态tracepoint</td><td>–add：添加一个probe event<br/>例如：perf probe –add do_sys_open<br/>–del：删除probe event<br/>例如：perf probe –del probe:do_sys_open<br/>perf record -e probe:do_sys_open -aR sleep 10</td></tr><tr><td>perf trace</td><td>类似strace，不过性能更佳</td><td>例如：perf trace ls</td></tr><tr><td>perf stat</td><td>运行命令并收集性能统计信息</td><td>查看在cpu0上的上下文切换次数：<br/>perf stat -e cs -C 0<br/>备注：-e表示事件，可通过perf list查看</td></tr><tr><td>perf top</td><td>可以实时查看当前系统进程函数占用率情况</td><td></td></tr><tr><td>perf record</td><td>运行命令并保存profile到perf.data</td><td>-p {pid} 记录进程的events<br/>-a：从所有cpu上进行采集<br/>-e {event}：指定PMU（处理器监控单元） event ，默认是cycles:ppp（CPU周期数）<br/>-g：启用调用图(堆栈链&#x2F;回溯)记录<br/>-F {freq}：采样频率<br/>例如：<br/>perf record -p 12069 -a -g -F 99 – sleep 10<br/>perf record -p 12069 -a -g -F 999 – sleep 10<br/>perf record -g -e cpu-clock .&#x2F;perftest</td></tr><tr><td>perf report</td><td>从perf.data读取并显示profile，–no-children：不统计Children开销</td><td>Self：Self 记录的是最后一列的符号（可以理解为函数）本身的采样数占总采样数的百分比；目的：找到最底层的热点函数<br/>Children：记录的是这个符号调用的其他符号（理解为子函数，包括直接调用和间接调用）的采样数<strong>之和</strong>占总采样数的百分比；目的：找到较高层的热点函数</td></tr><tr><td>perf script</td><td>从perf.data读取并显示详细的采样数据</td><td></td></tr><tr><td>perf kmem</td><td>跟踪&#x2F;测量内核内存属性</td><td>record：记录kmem events（–slab：记录slab申请器的events，–page：记录page 申请器的events）<br/>stat：报告内核内存统计信息（–slab：统计slab申请器的events，–page：统计page 申请器的events）</td></tr><tr><td>perf mem</td><td>分析内存访问</td><td></td></tr><tr><td>perf lock</td><td>分析锁性能</td><td></td></tr><tr><td>perf kvm</td><td>针对kvm虚拟化分析</td><td></td></tr><tr><td>perf sched</td><td>分析内核调度器性能</td><td>record：采集和记录scheduling events<br/>例如（全局）：perf sched record – sleep 10<br/>例如（进程）：perf sched record -p 752 – sleep 10<br/>script：报告采集到的事件<br/>latency：报告每个任务的调度延迟和进程的其他调度属性<br/>timehist：提供调度事件的分析报告</td></tr></tbody></table><h3 id="3-2-示例项目中的实际使用步骤"><a href="#3-2-示例项目中的实际使用步骤" class="headerlink" title="3.2 示例项目中的实际使用步骤"></a>3.2 示例项目中的实际使用步骤</h3><h4 id="pref-stat"><a href="#pref-stat" class="headerlink" title="pref stat"></a>pref stat</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># task-clock:用于执行程序的cpu时间；</span><br><span class="hljs-comment"># context-switches：程序在运行过程中经历的上下文切换次数；</span><br><span class="hljs-comment"># page-faults：进程运行过程中产生的缺页次数；</span><br><span class="hljs-comment"># cpu-migrations：程序在运行过程中发生的CPU迁移次数，即被调度器从一个CPU转移到另外一个CPU上运行；</span><br><span class="hljs-comment"># instructions：该进程在这段时间内完成的CPU指令数；</span><br><br><span class="hljs-comment"># 开放非root的用户的perf权限</span><br><span class="hljs-built_in">sudo</span> sh -c <span class="hljs-string">&quot;echo 1 &gt; /proc/sys/kernel/perf_event_paranoid&quot;</span><br><span class="hljs-comment"># 运行perf stat</span><br>perf <span class="hljs-built_in">stat</span> ./DG_server -k 1 -p 8001<br></code></pre></td></tr></table></figure><p><img src="https://qnwang.oss-cn-hangzhou.aliyuncs.com/internship/20250426211523409.png" alt="img"></p><h4 id="perf-kmem-record-stat"><a href="#perf-kmem-record-stat" class="headerlink" title="perf kmem record&#x2F;stat"></a>perf kmem record&#x2F;stat</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 运行内核命令检测</span><br><span class="hljs-built_in">sudo</span> perf kmem record<br>159 out of order events recorded.<br>[ perf record: Captured and wrote 504.678 MB perf.data (4969962 samples) ]<br><span class="hljs-comment"># 查看结果</span><br><span class="hljs-built_in">sudo</span> perf kmem <span class="hljs-built_in">stat</span><br></code></pre></td></tr></table></figure><p><img src="https://qnwang.oss-cn-hangzhou.aliyuncs.com/internship/20250426211759690.png" alt="image-20250426211759655"></p><h4 id="perf-sched"><a href="#perf-sched" class="headerlink" title="perf sched"></a>perf sched</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 运行内核调度检测</span><br><span class="hljs-built_in">sudo</span> perf <span class="hljs-built_in">sched</span> record -- <span class="hljs-built_in">sleep</span> 10<br><span class="hljs-comment"># 报告采集到的事件</span><br><span class="hljs-built_in">sudo</span> perf <span class="hljs-built_in">sched</span> script<br><span class="hljs-comment"># 报告每个任务的调度延迟和进程的其他调度属性</span><br><span class="hljs-built_in">sudo</span> perf <span class="hljs-built_in">sched</span> latency<br><span class="hljs-comment"># 提供调度事件的分析报告</span><br><span class="hljs-built_in">sudo</span> perf <span class="hljs-built_in">sched</span> timehist<br></code></pre></td></tr></table></figure><p><img src="https://qnwang.oss-cn-hangzhou.aliyuncs.com/internship/20250426215414635.png" alt="image-20250426215414588"></p><p><img src="https://qnwang.oss-cn-hangzhou.aliyuncs.com/internship/20250426215441190.png" alt="image-20250426215441138"></p><p><img src="https://qnwang.oss-cn-hangzhou.aliyuncs.com/internship/20250426215526604.png" alt="image-20250426215526565"></p><h4 id="结果解读说明"><a href="#结果解读说明" class="headerlink" title="结果解读说明"></a>结果解读说明</h4><h2 id="4-实战案例"><a href="#4-实战案例" class="headerlink" title="4. 实战案例"></a>4. 实战案例</h2><ul><li>使用工具发现并优化性能问题</li><li>结合截图或命令行结果分析问题原因</li><li>修改优化建议 + 效果对比</li></ul><h2 id="5-原理分析（进阶）"><a href="#5-原理分析（进阶）" class="headerlink" title="5. 原理分析（进阶）"></a>5. 原理分析（进阶）</h2><h3 id="工具内部工作机制简析"><a href="#工具内部工作机制简析" class="headerlink" title="工具内部工作机制简析"></a>工具内部工作机制简析</h3><h4 id="perf的整体架构"><a href="#perf的整体架构" class="headerlink" title="perf的整体架构"></a>perf的整体架构</h4><p><img src="https://qnwang.oss-cn-hangzhou.aliyuncs.com/internship/20250508171450437.jpeg" alt="图片"></p><p>Linux Perf 共由两部分组成：</p><ul><li>Perf Tools：用户态的 Perf Tools 为用户提供了一系列丰富的工具集用于收集、分析性能数据。</li><li>Perf Event Subsystem：Perf Event 子系统是内核众多子系统中的一员，其主要功能是和 Perf Tool 共同完成数据采集的工作。另外，Linux Hard Lockup Detector 也是通过 Perf Event 子系统来实现的</li></ul><h4 id="perf-工作模式"><a href="#perf-工作模式" class="headerlink" title="perf 工作模式"></a>perf 工作模式</h4><ol><li>Couting Mode<ul><li>Counting Mode 将会精确统计一段时间内 CPU 相关硬件计数器数值的变化。为了统计用户感兴趣的事件，Perf Tool 将设置性能控制相关的寄存器。这些寄存器的值将在监控周期结束后被读出。典型工具：Perf Stat。</li></ul></li><li>Sampling Mode<ul><li>Sampling Mode 将以定期采样方式获取性能数据。PMU 计数器将为某些特定事件配置溢出周期。当计数器溢出时，相关数据，如 IP、通用寄存器、EFLAG 将会被捕捉到。典型工具：Perf Record。</li></ul></li></ol><h4 id="调用关系"><a href="#调用关系" class="headerlink" title="调用关系"></a>调用关系</h4><p>以perf record为例：</p><pre><code class=" mermaid">graph TD  A[用户空间程序] --&gt; B[perf record 工具]  B --&gt; C[syscall: perf_event_open]  C --&gt; D[内核：sys_perf_event_open]  D --&gt; E[perf_install_in_context]  E --&gt; F[perf_event_alloc]:::important  F --&gt; G[初始化 perf_event 结构体]  G --&gt; H[attach 到任务 / CPU 上]  H --&gt; I[注册 PMU driver]:::important  I --&gt; J[启动事件采样/计数] classDef important fill:#fff3e0,stroke:#ff9800,stroke-width:2px;</code></pre><h4 id="采样"><a href="#采样" class="headerlink" title="采样"></a>采样</h4><p>为了减小对程序性能的影响，perf 并不会在每个函数加入统计代码，取而代之的统计方式是：采样。</p><p>采样的原理是：设置一个定时器，当定时器触发时，查看当前进程正在执行的函数，然后记录下来。如下图所示：</p><p><img src="https://qnwang.oss-cn-hangzhou.aliyuncs.com/internship/20250508171857688.jpeg" alt="图片"></p><p>如上图所示，每个 <code>cpu-clock</code> 是一个定时器的触发点。在 6 次定时器触发点中，函数 <code>func1</code> 被命中了 3 次，函数 <code>func2</code> 被命中了 1 次，函数 <code>func3</code> 被命中了 2 次。所以，我们可以推测出，函数 func1 的 CPU 使用率最高。</p><p>采样的步骤如下：</p><ul><li>通过设置一个定时器，定时器的触发时间可以由用户设定。</li><li>定时器被触发后，将会调用采集函数收集当前运行环境的数据（如当前正在执行的进程和函数等）。</li><li>将采集到的数据写入到一个环形缓冲区（ring buffer）中。</li><li>应用层可以通过内存映射来读取环形缓冲区中的采样数据。</li></ul><p><img src="https://qnwang.oss-cn-hangzhou.aliyuncs.com/internship/20250508171943596.png" alt="图片"></p><p>采样过程的流程图：</p><pre><code class=" mermaid">graph TD  A[perf_event 结构体] --&gt; B[perf_event_context 结构体]  A --&gt; C[pmu 结构体]  B --&gt; D[连接所有属于当前上下文的事件]  C --&gt; E[perf_ops_cpu_clock]  E --&gt; F[cpu_clock_perf_event_enable 启用事件]  E --&gt; G[cpu_clock_perf_event_disable 禁用事件]  E --&gt; H[cpu_clock_perf_event_read 事件被触发时的回调]  F --&gt; I[perf_swevent_start_hrtimer 初始化]  I --&gt; J[perf_swevent_hrtimer 初始化定时器的回调函数]  J --&gt; K[perf_event_overflow 对数据进行采样与收集]:::important  K --&gt; L[__perf_event_overflow]  L --&gt; M[perf_event_output 数据采样]  M --&gt; N[perf_prepare_sample 采样数据保存到data中]:::important  M --&gt; O[perf_output_sample 采样数据保存到环形缓冲区中]  O --&gt; P[perf_output_put 采样数据保存到环形缓冲区中]:::important classDef important fill:#fff3e0,stroke:#ff9800,stroke-width:2px;</code></pre><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p>如果程序有成千上万的函数，那么采样出来的数据可能非常多，这个时候就需要对采样的数据进行排序。</p><p>为了对采样数据进行排序，perf 使用<a href="https://zhida.zhihu.com/search?content_id=215607053&content_type=Article&match_order=1&q=%E7%BA%A2%E9%BB%91%E6%A0%91&zhida_source=entity">红黑树</a>这种数据结构，如下图所示：</p><p><img src="https://qnwang.oss-cn-hangzhou.aliyuncs.com/internship/20250508171928923.jpeg" alt="图片"></p><p>如上图所示，在 perf 采样的数据中，有 7 个函数被统计了命中次数，perf 使用采样到的数据构建一棵红黑树。</p><p>根据红黑树的特性，最右边的节点就是被命中最多的函数，这样就能把程序中 CPU 使用率最高的函数找出来。</p><ul><li>对程序性能的影响与副作用</li><li>与其他工具的异同对比</li></ul><h2 id="6-小结与心得"><a href="#6-小结与心得" class="headerlink" title="6. 小结与心得"></a>6. 小结与心得</h2><ul><li>学到了什么？</li><li>在实习中可以用在哪些场景？</li></ul>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
